<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>宇宙</title>
      <link href="/archives/5eac2c2b.html"/>
      <url>/archives/5eac2c2b.html</url>
      
        <content type="html"><![CDATA[<p><strong>宇宙爆炸了一百三十七亿年，才等到你。<br>当恒星被撕裂的时候<br>它会将自己生命过程中创造的所有元素炸入空中，<br>然后死去，这些元素将在宇宙中铺开形成星云，<br>在星云的中心将会有一团小小的光，<br>新的恒星重生于消亡恒星的残余，<br>在这个死亡又重生于消亡恒星的残余，<br>在这个死亡又重生的宇宙循环中，我们出现了。<br>宇宙初生时，元素大概只有氢氘氦锂而已。<br>碳基生命所需的碳氧等元素，都是恒星煅烧出来的。<br>恒星死后，这些元素被释出成为宇宙尘埃<br>宇宙尘埃又凝成行星，行星再逐渐演化出生命。<br>我们确实都来自已逝的恒星<br>仰望星河，是在凝视未死的同伴<br>从宇宙起源到最后一个黑洞的消失达个过程中，<br>生命正如我们所言之有百分之千亿分之，<br>千亿分之十分之一的可能性,<br>所以对我来说，宇宙中最惊人的奇迹不是恒星，不是行星，也不是星系，甚至根本就不是一个物质，<br>而是时间里的一瞬间，那个瞬间，就是现在。<br>当我们仰望天空，望向遥远的恒星和星系时,<br>我们其实是在仰望过去，<br>因为光从那些遥远天体到达地球需要时间，<br>而光从那个红点处传播到我们这里，<br>差不多经历了整个宇宙史。<br>我们看到的是一百三十亿年前发生的事情,<br>我们看到的是宇宙初期的一颗恒星爆炸灭亡的景象。<br>我刚用相机捕捉到的，<br>这个光点二百五十万年前踏上了旅程。<br>那时地球上还没有人类，<br>远古的祖先能人正在非洲广表的平原上漫步,<br>就是在那些光线穿行于无垠宇宙的同时，<br>人类不断进化，一代又一代的生老病死周而复始，旅途开始的二百五十万年后，这些远道而来的信使,<br>穿越漫长的时间，映入现在我们的眼帘。<br>我感激我们的光锥曾彼此重叠<br>而你永远改变了我的星轨。<br>纵使再不能相见，<br>你仍是我所在的星系未曾分崩离析的原因，<br>是我宇宙之网的永恒组成。<br>其实分别也没有那么可怕，<br>65万个小时后，当我们氧化成风，<br>就能变成同一杯啤酒上两朵相邻的泡沫，<br>就能变成同一盏路灯下两粒依偎的尘埃。<br>宇宙中的原子并不会湮灭，而我们，也终究会在一起。<br>在广表的空间和无限的时间中,<br>能够与你共享一颗行星和一段时光，是我的荣幸。<br>我们的故事就是宇宙的故事，因为我们是恒星的孩子。<br>我们与那些遥远星系息息相关，无论它们是如何与我们天各一方，那些经过数十亿年旅行到达地球的光线，<br>终究会把我们联系在一起。<br>地球正一点点的疏离月亮。<br>据说，每一百万年就会陌生一杪，早在25亿年前,<br>我们便开始了漫长的别离</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的青春恋爱物语果然有问题之大老师的语录</title>
      <link href="/archives/e3fdebf2.html"/>
      <url>/archives/e3fdebf2.html</url>
      
        <content type="html"><![CDATA[<h1 id="大老师"><a href="#大老师" class="headerlink" title="大老师"></a>大老师</h1><p><strong>【1】：温柔正确的人总是难以生存，因为这世界既不温柔，也不正确 –大老师</strong></p><p><strong>【2】：努力是不会背叛自己的，虽然梦想会背叛。 努力不一定能实现梦想，但是曾经努力过的事实却足以安慰自己。 –大老师</strong></p><p><strong>【3】：要让一群人团结起来，需要的不是英明的领导，而是共同的敌人 –大老师</strong></p><p><strong>【4】：没有期待就没有失望，没有羁绊就不会受伤。 –大老师</strong></p><p><strong>【5】：我讨厌温柔的女孩子。温柔的女孩子其实对所有人都温柔，我却会误以为只对我温柔， 然后就沾沾自喜得意忘形，最后闹得不欢而散，双方都受到伤害。–所以我才讨厌温柔的女孩子。 –大老师</strong></p><p><strong>【6】：孤独的人不会伤害别人，只会不断地伤害自己罢了。 –大老师</strong></p><p><strong>【7】：这世上真正的好人和坏人都很少，大部分都是普通人。平时随波逐流，关键时刻则会出于自我保护 而露出獠牙–然而正是因为这样才可怕。 –大老师</strong></p><p><strong>【8】：大家互相帮助，一起成功，一起幸福什么的，不过是种理想。 现实中，有人幸福，就必定有人被抛弃 有人光鲜，就必须有人满身泥泞。 –大老师</strong></p><p><strong>【9】：只有弱者才喜欢扎堆，问题是绝大部分人都是弱者。 –大老师</strong></p><p><strong>【10】：只要稍微打个招呼就会胡思乱想，要是互相发短信，心中还会起波澜，接到对方来电的那一整天，都会对着来电记录傻笑，可是我知道，那只是温柔，对我温柔的人对别人也同样温柔，这种事差点就忘记了,如果说真相是残酷的，谎言肯定是温柔的，所以温柔是谎言，一次又一次期待，一次又一次落空，不知从何时开始，便不再怀抱希望。 –大老师</strong></p><p><strong>【11】：真正重要的东西，肉眼是看不到的。 –大老师</strong></p><p><strong>【12】：孤独的人其实非常擅于思考。诚如「人是一根有思想的芦苇」所言，我们无时无刻不在思考，而孤独者不需要跟人分享思考内容，所以能想得更深入，因此，我们这群孤独的人拥有不同于凡人的思维，不时会出现超乎常人的想法。 –大老师</strong></p><p><strong>【13】：女生口中的「好人」首先百分之百是「怎样都好的人」的意思，再好也不过止于「方便好使的人」。也就是说，不管怎样都是没戏了 –大老师</strong></p><p><strong>【14】：所谓孤零零指的不是周围的人口密度，而是指个人的精神层面了。就算别人离你再近，要是不能感觉和自己是同一种生物，那么干涸的心也得不到满足。 –大老师</strong></p><p><strong>【15】：真正的强者才不会群居的。孤独者永远都是和这个世界的全部相对立的。 –大老师</strong></p><p><strong>【16】：所谓的「改变自己，世界就会随之改变」这种事，是不可能的。 不论是已经成型的对自己的评价，还是既存的人际关系，都不可能轻易地朝积极的方向变化。 人对人的评价既不是加分也不是减分。 只不过是固定观念和既存印象而已。 人看不到现实的本来面目。只能看到想看的、想拥有的现实。 –大老师</strong></p><p><strong>【17】：因为重要，因为不想失去。 隐藏着，伪装着。 正因如此才一定会失去。 于是，就会悲叹起失去。悲叹起比起失去还是不要得到会更好。悲叹起如果离手之时会后悔到死的话，还是打一开始就放弃会更好。 在变化的世界之中，不得不改变的关系大概是存在的。会破坏到无法再次取回的事物，也肯定是存在的。 所以，无论谁都在说谎。 –大老师</strong></p><p><strong>【18】：行动被评价和人格被评价完全是两码事。就像不能根据仅仅一次的善行就把那个人判定为善人 –大老师</strong></p><p><strong>【19】：不能逃避”什么的只是强者的思考方式，强求这种事情的世界才是有问题的 –大老师</strong></p><p><strong>【20】：有自知之明的人才能理解讽刺…没有自知之明的人说多了也是白费力气…不懂和不存在是同义的. –大老师</strong></p><p><strong>【21】：让某个人承受痛苦，再把那个人除掉，这就是我为人人 –大老师</strong></p><p><strong>【22】：一个个的声音肯定有各自的意义，可无数个一齐聚集起来就无意义了。 –大老师</strong></p><p><strong>【23】：看谁的脸色，讨谁的欢心，保持联络，迎合话题，不得不做那么多才能维系的友情，那种东西根本就不是友情。如果那么繁琐的东西才能被称为青春的话，我根本不需要。靠这种无聊的交流而装做很快乐的行为根本就是自我满足。那根本就是欺瞒。是应该唾弃的邪恶。 –大老师</strong></p><p><strong>【24】：人类要是遇到真心害怕的事，完全不会在意别人，就算牺牲周围的人也要获救 –大老师</strong></p><p><strong>【25】：为什么要称赞他人？那是为了把对方捧到更高的地方更容易绊他的脚，为了把他从高处摔下来。这就叫做称赞杀人法。 –大老师</strong></p><p><strong>【26】：因为无理当道，所以正理去死吧！ –大老师</strong></p><p><strong>【27】：我宁愿孤零零地被撒手不管，以往的孤独环境还让我内心自在得多。 –大老师</strong></p><p><strong>【28】：世界会随自己而改变这种事，根本不可能，评价他人是靠固定观念与印象而已，孤独的人会被迫孤独下去，要是因努力而引人关注的话，只会成为攻击的素材罢了，这就是孩子们的王国中腐朽的规则 –大老师</strong></p><p><strong>【29】：世界上的男人 80%都抱有“她是不是喜欢我？”这样的想法而活 正因为如此 我才需要告诫自己 「永远都不要以为妹子喜欢你」 –大老师</strong></p><p><strong>【30】：误会不过是误会，并不是真实。那么只要我自己明白就好了。不管被谁怎么觉得了都无所谓。每次想要解开误会的时候都会向着不好的方向前进。我已经放弃解释了。 –大老师</strong></p><p><strong>【31】：语言是误解的源泉..误解是解不开的..人生无论何时都无法重新来过…错误的答案一定永远都是错误的… –大老师</strong></p><p><strong>【32】：孤零零可以自傲的便是自己的深思。正常而言，原本用于对人关系的资源仅仅被用来面向自身的话，在自我检查与反省与后悔与妄想与想象与幻想的不断交替反复之后，最终达到思想与哲学程度的，毫无意义的强大思考能力。然后将其尽数消耗，对一切的可能性进行摸索，对考虑后得出的结论反向证明后进行否定。 把在其中无法否定的结论，就如同为自我辩护一般的全力证明。 批判他人与自我辩护才是我比企谷八幡的真正能力。 只要不停地重复着这些，自然可以得出答案。 如此简单罢了。 –大老师</strong></p><p><strong>【33】：氛围和气氛是无法违抗的。人只能被迫采取违背本意的行动。因为“大家”都这么说，因为“大家”都这么做，不这么做的话，就无法融入“大家”之中。 –大老师</strong></p><p><strong>【34】：孤高所以至高。所谓真正的英雄就是一个人。 因为孤高所以强大。没有持有羁绊也就是说没有必须守护的东西。必须守护的东西换言之就是弱点。希腊的英雄阿基里斯、或者是最强的僧兵武藏坊弁庆，就是因为有弱点才会失败。肯定只要他们没有弱点，就会作为胜利者在历史上刻下自己的名字的。 因此没有弱点、没有必须守护的东西、和别人没有联系的人才是最强的。 –大老师</strong></p><p><strong>【35】：要是烦恼于人际关系的话，只要将其本身摧毁的话就没有可烦恼的事了，大家都变孤独的话，就不会有争吵与纷争了 –大老师</strong></p><p><strong>【36】：我是想被包养，但不会接受施舍 –大老师</strong></p><p><strong>【37】：“人”字经常被解释为人和人互相支持 但写起来不是往一边倒么 我觉得容忍他人的牺牲才是“人”这个概念 –大老师</strong></p><p><strong>【38】：尽管扭曲幼稚失败，但是只要坚持下去就是正义。如果只是被人否定就要改变的话，那种东西既不是梦想也不是自我。 –大老师</strong></p><p><strong>【39】：不能逃避只是强者的想法，错的并不会总是自己，社会上，人世间，身边总会有人做错，自己可以改变它，这只是顺应了这个垃圾一般的冷淡且残酷的世界，承认自己的失败并顺从的行为，只是用漂亮话装饰起来连自己都要欺骗罢了 –大老师</strong></p><p><strong>【40】：制造出话题，附和话题，表现出对对方回答的同感。在这个过程中缩小对方的进攻区域，同时也是不着痕迹的告诉对方自己的守备范围。 所谓的和人好好应对的行为，不过就是欺骗自己，欺骗对方，对方知道自己被骗，自己也被对方所骗，这样的连锁循环而已。说到底也不过是虚伪、猜疑和欺瞒而已。 –大老师</strong></p><p><strong>【41】：来吧，从现在开始就是我的时间了。从现在开始的十分钟间只是属于我一人的时间。 照满聚光灯的舞台并不是我的归处。 从灰暗的出口延展开的无人的小道才是我该站立的舞台。 比企谷八幡的一人舞台。 –大老师</strong></p><p><strong>【42】：猫是可爱的，狼是很帅的。就是说，孤独又可爱又帅。 –大老师</strong></p><p><strong>【43】：即使努力也不一定能实现梦想。不如说实现不了的还比较多。但是曾经努力过的事实却足以安慰自己。整个社会对我都很苛刻。所以至少让我自己宽容一下我自己吧。如果大家都对自己更宽容一点的话。大家都变成废柴就没有废柴了。 –大老师</strong></p><p><strong>【44】：她们像夜空中的月亮，不论你走到哪里，她们就跟到哪里，但你无法触碰她们，也无法掌握距离感。光是打个招呼，就开始胡思乱想；彼此传封邮件，便感到心神不宁；接到对方来电的那一整天，都会对着来电纪录傻笑。不过我很清楚，那只是一种温柔。对我温柔的人也会对其他人温柔，我几乎要忘记这个道理。我并不迟钝，其实满敏感的，甚至到了过敏的地步。因为这个缘故，我才会出现过敏反应。我早已有过一次教训，训练有素的独行侠是不会重复被骗的。不管是别人猜拳猜输，玩处罚游戏来跟我告白；还是由女生代笔，让男生交给我的假情书，对我来说通通没用！我可是身经百战的强者！如果要比输，我肯定是最厉害的！ 一次又一次期待，一次又一次落空……不知道从什么时候开始，我已经不再抱持 –大老师</strong></p><p><strong>【45】：妹妹是种奇妙的生物，无论多么可爱也不会对她有想法。她的内衣也不过是块布。现实中的妹妹就是这样的东西。 –大老师</strong></p><p><strong>【46】：我所熟知的她 总是美丽 正直 诚实 就算无依无靠 也靠自己的力量坚强地站着 我一定是憧憬着 那样完美的她 擅自去期待 擅自把她理想化 擅自认为自己理解她 然后擅自地失望 告诫过自己无数次 结果却还是没有改 她也会撒谎 连这种理所当然的事都无法容忍的自己 我很厌恶这样的自己 –大老师</strong></p><p><strong>【48】：何为自由意志？没有，思来想去，所谓的自由意志，人的个体性，根本是不存在的，人是多么的相似，即是是表面千差万别，追其本原，依旧是一样的。根本，还是为活而活，人所谓的自由意志到底也不过如此。 –大老师</strong></p><p><strong>【49】：认为说了对方就能明白 这是一种傲慢 说者本人的自我满足 听者的狂妄自大 当中会有各种情况 并非说出来就一定能够相互理解 所以 我并不渴求用语言来表达 是啊 不说就能明白 根本是不切实际的 但是……我…… 我不渴求语言 我想要的东西 确实存在 那一定不是希望互相了解 希望友好相处 希望待在一起之类的事情 我并不想让别人来理解我 而是想要去了解 想了解 想明白 想弄明白之后安心度日 想得到一份平静 因为一无所知这一点让我极其畏惧 想要完全理解什么的 是个及其自以为是 独断专行且傲慢的愿望 真的很卑鄙 令人厌烦 怀有那种愿望的自己简直恶心到无可救药 –大老师</strong></p><p><strong>【50】：说时间可以解决一切那不过是骗人的 那不过是被逼到只能将一切都忘却都断送 将问题本身放置直至风化而已 –大老师</strong></p><p><strong>【51】：孤高所以至高，所谓真正的英雄就是一个人。因为孤高所以强大。没有持有羁绊也就是说没有必须守护的东西。必需守护的东西换言之就是弱点。就是因为有弱点才会失败。因此没有弱点，没有必须守护的东西，和别人没有联系的人才是最强的。 也就是说，我是最强的。 –大老师</strong></p><p><strong>【52】：不要以为抹消过去，重新来过，即可发生什么改变 –大老师</strong></p><p><strong>【53】：这只是谁也不会伤害到的，温柔的谎言。虽然听上去不时闪现着希望，实际上却是迂回地饱含着绝望的说法。可能做不到 这件事本身说话人自己也了然于心，而向众人留有回旋的余地。 –大老师</strong></p><p><strong>【54】：拥有朋友，就意味着要承受与此有关的一切，甚至于混乱。因此，我不会无条件地认为【有很多朋友真棒】之类 –大老师</strong></p><p><strong>【55】：既然存在拥有朋友才能学到的东西，没有朋友才能学到东西肯定也是有的。这两方面应该是表里一体拥有同等价值的。 –大老师</strong></p><p><strong>【56】：也没法违背「气氛」，因此就算理解到了别人当下的痛苦也是无能为力。 氛围和气氛是无法违抗的。人只能被迫采取违背本意的行动。因为“大家”都这么说，因为“大家”都这么做， 不这么做的话，就无法融入“大家”之中。不过，并不存在名叫什么“大家”的家伙。既没法与他说话也没法揍他一顿。 他也不会生气，不会笑，不过是集团的魔力制造出的幻想而已，是在不经意之间诞生出的魔物，是为了隐藏个人小小的 恶意所创造出的亡灵。是将不是同伴的人蚕食殆尽，只有成为同伴才能摆脱诅咒的妖魔鬼怪。曾几何时，他也好，她也好， 都是这家伙的被害者。所以我才憎恶着。这个强求着所谓“大家”的世界。 –大老师</strong></p><p><strong>【57】：自称理解了能教他人什么的都太狂妄了 自以为理解了是罪与恶 虽然如此 我们不得不自欺欺人地活下去 –大老师</strong></p><p><strong>【58】：然而，并不是说，仅仅那样就是正确的。 正确的做法就等于了不起，我认为那才是怠慢。 按照教科书完成既定的课程，达成计划的劳动定额…… 这不只是效法至今的传统和正攻法而已吗。凭借着过去的财产，依靠着权威，这难道不只是在加固着目前还毫无作为的自己而已吗。 把自己的一切全部委身给自己的正确性，这种做法哪里算得上正确。 –大老师</strong></p><p><strong>【59】：自己的过去会被当做笑话或者捏他的形式，被他人随随便便的共有化。最终只会被他和她们当做方便好用的交流素材， 快乐的使用着 –大老师</strong></p><p><strong>【60】：怎么办？没怎么办。只想就这件事随便说说而已。就好比，在电视里看到战争和贫困的场景，只能一边说着“真是可怜啊 ”“真是不得了啊”“这是我们无能为力的事情啊”，而同时我们在舒适的屋子里吃着好吃的晚饭的事情也没有改变。 我们无法在此之后着手做些什么，到最后不过只能想到“要对目前为止自己的幸福心怀感激”这种程度的事 –大老师</strong></p><p><strong>【61】：人看不到现实的本来面目。只能看到想看的、想拥有的现实。 不论身处底层心情恶劣的家伙做出什么样的努力，不过都会以被他人说成是“那家伙努力个什么劲啊？噗忽忽”而告终。 蹩脚的引人注目只能相反地成为被攻击的素材。 –大老师</strong></p><p><strong>【62】：世上没有像一个模子刻出来样的恶人哦 平时大家都是善人 至少大家都是普通人 但是 一到紧要关头 就会突然变成恶人 所以很 可怕 因为不能大意 人不可轻信 –大老师</strong></p><p><strong>【63】：人类要是遇到真心害怕的事 完全不会在意别人 就算牺牲周围的人也要获救 只要暴露出这份丑陋的嘴脸 就再也无法好好相处了  不能逃避只是强身的想法 错的并不会总是自己 社会上 人世间 身边 总会有人做错 自己可以改变它 这只是顺应了这个垃圾一 般的冷酷且残酷的世界 承认自己的失败并顺从的行为 只是用漂亮话装饰起来 连自己都要欺骗罢了 –大老师</strong></p><p><strong>【64】：因为重要，因为不想失去。隐藏着，伪装着。正因如此才一定会失去。 于是，就会悲叹起失去。悲叹起比起失去还是不要得到会更好。悲叹起如果离手之时会后悔到死的话，还是放弃会更好 –大老师</strong></p><p><strong>【65】：我，讨厌人群。还有，温柔的女孩子也，讨厌。 犹如在夜间抬头看到的月亮，即使到哪都跟着也够不到。那份距离感无法把握。打一句招呼便会在意，互发邮件便会心中小鹿乱撞。在打电话来的日子一看见来信履历表情会不由得舒缓下来。但是，我知道。这叫做温柔。对我温柔的人也会对其他人温柔，这件事好像不知不觉就忘了。并不是迟钝。不如说是敏感。岂止如此甚至是过敏。所以产生了过敏反应。那个模式已经体会过一次了。久经沙场的孤独者是不会第二次中招的。不 管是输掉猜拳做为惩罚游戏的告白，还是由女生代笔却 来自男人的伪造情书，我都免疫了。因为是百战磨练过的强者。有关于败北的事我是最强的。总是期待着，总是出差错，从何时开始就不再抱有希望。所以，我永远，讨厌温柔的女孩子 –大老师</strong></p><p><strong>【66】：这样强行掩饰，将与平常不同的自己，与独处时的自己相异的一面展示着，难道不就是虚伪吗。 通过这样种种努力赢得的爱情，能够称作是可以真正地对自己、对真实的自己的爱情吗？ 为了被喜欢为了被爱而改变的自己，是否可以称作自己–我不清楚。若这是伪装出来的， 总有一天会破裂的吧，若在本质上变化了那就不是原来的自己 –大老师</strong></p><p><strong>【67】：至始至终顶着头衔，一旦得到他人的认可就沾沾自喜，继而醉心于自己的处境，高呼自己为重要人士，最后却被自己定下的 规则所束缚，一旦没有获得他人的指点便无法寻找到属于自己的世界，这种状态才不能被称作成长。 –大老师</strong></p><p><strong>【68】：话语是误会的源泉 –大老师</strong></p><p><strong>【69】：话说回来，现充还真是麻烦啊。所谓的朋友也不光只有好事，大概就连负面的东西也不得不共有吧。对了，这种情况下为 了维持关系就需要献上所谓的牺牲品了吧。 只是这种关系本身变成了问题滋生的温床。 这样的话，就必须在这个关系本身上做文章了。 –大老师</strong></p><p><strong>【70】：不过，这是温柔也好同情也好，仅仅是义务而已。然而却会让经验值低的男生“啊、啊？某非……这家伙喜欢我？”这样误会 这一点上实在令人困扰。明明还是更加简单易懂一点的好，我说真的。 如果有着能将女孩子发来的邮件自动转换成带敬语的软件就好了。这样也就不会有奇怪的期待什么的了。阿类，这玩意卖得动吗？ –大老师</strong></p><p><strong>【71】：所谓的和人好好应对的行为，不过就是欺骗自己，欺骗对方，对方知道自己被骗，自己也被对方所骗，这样的连锁循环而已。说到底也不过是虚伪、猜疑和欺瞒而已。 –大老师</strong></p><p><strong>【72】：–不管是结婚还是将来，之后的事情都是不得而知的。一难之后还有一难是这世间的常理。不过，谁都拥有追求幸福的权力。为了机会降临人应不懈努力。 –大老师</strong></p><p><strong>【73】：只有在必需时才去做，不必须就不会去做。人生也是如此。活着就会遇到讨厌的事，也就是说活着本身就是让人讨厌的，但不能因此就放弃活着。 –大老师</strong></p><p><strong>【74】：讨厌还勉强的话彼此只会变得更不幸而已 –大老师</strong></p><p><strong>【75】：假设。 假设的话。 假设说，选择了像游戏一样仅可返回上一个存档的选项重新来过的话，人生是否会改变呢？ 答案是否。 那是只有拥有选项的人才可以选择的道路。对于从一开始就没有选项的人来说，那个假设完全无意义。 因此没有后悔。更确切的说对这个人生的大部分事情都在后悔着。 –大老师</strong></p><p><strong>【76】：在一点点长大成人，逐渐看清现实的未来的过程中，会一点点的变得无法一味追寻梦的物语。虽然大家都开玩笑地说着工作就输了的什么，却是绝对不会搞错这件事。人们对于这个世界上一味的追寻着梦的生活是多么懊悔，只是想一想就唉声叹气了。 –大老师</strong></p><p><strong>【77】：如果说真实是残酷的，谎言绝对是温柔的吧。 –大老师</strong></p><p><strong>【78】：所谓难得糊涂，太正确太清醒记性太好的人，都是活得很辛苦的。 –大老师</strong></p><p><strong>【79】：愤怒是一种持续时间很短的感情。所以一旦给一段时间冷却下来，就能做出正确的判断。但是，即便愤怒不再持续，憎恨也会持续下去。他们会在心灵深处继续燃烧，如炽热的火苗般静静地、缓慢地一直燃烧下去。而更加恶劣的是，嘲笑、玩弄和蔑视的感情会更长时间地持续下去。贬低别人总是比夸奖别人要简单，在其中混入一些俏皮话甚至会更让人快乐。正因为让人觉得轻快，于是能够以戏说的感觉继续这么做下去。于是这种做法与憎恶及怨恨有别，在没有犯罪意识的情况下长期而反复地进行下去。 –大老师</strong></p><p><strong>【80】：谁都不受伤的世界是不存在的。如果有的话，那是谁都平等的受伤的世界。尽管知道谁都不受伤的世界就不会成立这种事，却依旧讨厌谁受伤的事的话，只有创造出替罪羊。不是选出既存的谁，只是创造出将伤口、憎恶在那身体之中一心接受的存在。 –大老师</strong></p><p><strong>【81】：属于我们的样子总是会在某个地方产生分歧… 那么真心…真正的我们又在哪里呢？ –大老师</strong></p><p><strong>【82】：在痛苦的时候得到的温柔只能忍耐。因为自己的悲惨遭遇已经被大家亲眼目睹了，因为已经证明了自己是个多么可怜的卑微存在，因为他注意到了自己是一个只能被别人的温柔所拯救，一事无成的人。比起自己辛苦地承担一切，不如将一切责任推卸给别人的不理解，让人更能够轻松一些吧 –大老师</strong></p><p><strong>【83】：属于她的样子 属于我的样子 我们肯定一直怀揣着别人为你规定好的战绩 然而却总是偏离那个规定 ！ –大老师</strong></p><p><strong>【84】：早已明晰事物终将逝去却延续其生命的行为有什么意义吗？ 总有一天所有都会消失，这是真理。 只是，尽管如此。 也存在正因为失去才美丽的东西。 正因为知道有一天会结束，意义才随之产生。不管是停滞还是闭塞，也就是说安息也一样，一定不是可以忽视或者享受的东西。 应该意识到必将消逝。 时不时轻轻回首看不知何时会失去的东西，犹如宝物般怀念、珍视，一个人静静的独自举杯般的幸福，也一定存在。 –大老师</strong></p><p><strong>【85】：因为会一回想起过去，会让人后悔得想去死:而展望未来又会让人担心的得愁眉不展，所以用消除法，就能得出现在才是最幸福的结论啊。 –大老师</strong></p><p><strong>【86】：人只会看到自己想看到的、听到自己想听到的。我也并不例外。 –大老师</strong></p><p><strong>【87】：你怎么可能明白。想确认考试范围都找不到人能问一下，默默地用功，担惊受怕地直面自己的成果。而你们却聚在一起对答案比分数互相骂笨蛋互相鼓励以此逃避现实，而我却要一个人正面接受现实啊。 –大老师</strong></p><p><strong>【88】：这世上，有些事物悔之不尽。也有句话叫做往日无法重来。明明直到昨天还在普通的交谈，突然之间就拉开了距离，从此不再说话。频繁交换的邮件也就此断绝。这还算是好的情况。就连互相之间强颜欢笑，互相展露仿佛在确认“不要在意哦，我们还是在好好地扮演着朋友的哦”一般的笑容都是有的。即便如此，由于盘踞在脑海一角的意识无论如何也无法消去，于是顾虑着，也不知从谁开始互相疏远，然后就此结束。 –大老师</strong></p><p><strong>【89】：并不是说只有传达心意，将一切挑明就是真正正确的。无法踏出一步的关系。不被允许跨越底线的关系。不能原谅被践踏的关系。电视剧或是漫画总是描绘在着越线之后的happy-end。然而，现实并非如此。是更加的残酷，和冷淡。重要的事物，是无法替代的。失去了无可替代的事物，就无法再次取得。 –大老师</strong></p><p><strong>【90】：我只是单单的想证明一件事而已。孤独的人并不是可怜的家伙，并不是因为孤独所以这家伙就是糟糕的家伙。这些只是我一个人独断的想法这种事情我是知道的。但是，现在的我不会去否定过去的我。一个人过的时间是罪恶的，一个人呆着是不好的，我绝不会说。 –大老师</strong></p><p><strong>【91】：虽然是和自己没有关系的事情，在看到了之后就再也不能说自己不知道了。不过，还是什么都办不到。所以至少要怜悯一下。这种感情虽然美丽而崇高，同时也只看到过于丑陋的借口。这不过是我所憎恶的，存在与谎言满载的青春的延长线上的东西而已。 –大老师</strong></p><p><strong>【92】：结婚 这是人生的坟墓 已婚者都毫不例外的炫耀着结婚的好处 虽然说有能说我回来了的对象很高兴之类的 看着孩子的睡颜第二天就能加油之类的 但是等等 在老家的话也能、说我回来了 而且 能看见孩子的睡颜就意味着刚加完班 这真的算的上是幸福吗 本已经找到幸福的他们的双眼却都和我一样是已经腐朽的了 简直是在大街上活蹦乱跳的僵尸！ –大老师</strong></p><p><strong>【93】：自称理解了能教他人什么的都太狂妄了。自以为理解了是罪与恶。虽然如此，我们不得不自欺欺人地活下去。理解了，和被理解了，凭借云里雾里的相互认识随时重新定义我们的存在，或者对方的存在，只得一边鼓噪一边继续生活。万一不这样做自己这一存在就会烟消云散。 –大老师</strong></p><p><strong>【94】：有些失败忘记了，有些失败习惯了，有些失败已经挽回了，但是却不能因此而将失败的印记抹去。或许应该说，失败才是我们活着的证明。 –大老师</strong></p><p><strong>【95】：你能明白吗，像白痴一样在大热天里，或者手指都冻僵了的大雪天里一个人骑车上学回家的辛苦。你们在那喊着好热啊好冷啊受不了啊之类的互相欺骗唬弄掩饰的时候我全靠一个人坚持过来。 –大老师</strong></p><p><strong>【96】：我觉得对于人类、以及对于生物来说，逃避讨厌的事是理所当然的，而这一点并不被认可也让我感觉有些疑惑。我觉得不应该去责备从现状中离开的人。应该责备的，是责备离去的人的风潮。 –大老师</strong></p><p><strong>【97】：眷恋感念过去，往昔。或是叹惋懊悔已改变，被改变的事物。那么，归根结底所谓变化，是应该悲伤的事情吗。成长与进化还有变迁，真是可喜正确而又极好的东西吗。即使自己不改变，世界，周围还是在不断变化。因为不想被抛下只得拼命紧随其后不是吗。假使不改变，悲伤就不会产生。哪怕都不产生，负面要素不会出现就是一大好处。 所以我不否定一成不变。毫无否定过去的我，和现在的我的打算。改变什么的，结果只是为了逃避现状。要是不选择逃避就该不变地在那坚持到底。也有正因为不变才能获得之物。 –大老师</strong></p><p><strong>【98】：什么模棱两可的答案串通一气的关系…..这些都不需要 明明知道没有那种事 明明知道要是钻牛角尖的话就会落得一 无 所 有的下场 即便如此还是左思右想 痛苦不堪 不断挣扎… –大老师</strong></p><p><strong>【99】：只要不把问题当成问题，那就不是个问题。–大老师</strong></p><p><strong>【100】：事事都要回顾的话，仅仅这一项，人生就会漆黑一片吧。–大老师</strong></p><p><strong>【101】：爱与友情以及勇气改变不了一个人，只有受伤才能让人成长。–大老师</strong></p><p><strong>【102】：不能逃避只是强者的想法，错的并不会总是自己，社会上、人世间、我们身边，也会有很多人犯错，自己能够改变它，这只是顺应了这个如垃圾一般，冷淡又残酷的世界。承认自己的失败并顺从的行为，只是用漂亮话装饰起来，连自己都要欺骗罢了。–大老师</strong></p><p><strong>【103】：女孩是一种只对帅哥产生兴趣 并妄图与其发展为不纯洁男女关系的种族 换句话说，就是我的敌人。–大老师</strong></p><p><strong>【104】:努力是不会背叛自己的,虽然梦想有时会背叛自己,就算努力，也不见得一定能实梦想 ,不如说，多数是实现不了的 .不过，只要有努力过的事实就可以慰籍自己。–大老师</strong></p><p><strong>【105】：因为说了，所以会明白，这是一种傲慢，是说话本人的自我满足，听话人的自以为是。–大老师</strong></p><p><strong>【106】：我没有错，错的是这个社会。–大老师</strong></p><p><strong>【107】：如果失败也能称为是青春的象征的话那么交友失败的人也可谓是尽享青春也不为过了吧。–大老师</strong></p><p><strong>【108】：尽管去思考，挣扎， 痛苦，煎熬，烦恼吧！不然的话就称不上是真物–大老师</strong></p><p><strong>【109】：属于我们的样子总是会在某个地方产生分歧。那么真物…真正的我们又在哪里呢？–大老师</strong></p><p><strong>【110】：明明讨厌却还要勉强自己，只会令双方都不幸–大老师</strong></p><p><strong>【111】：如果能从别人那里得到自己期盼的东西，能够收获自己想要的东西的话，那我还是不作任何期盼和渴望了。因为不管是别人给予的东西，还是能够轻易收到的东西，那一定都是伪物，总有一天会失去···所以肯定会让人不断地追求下去。–大老师</strong></p><p><strong>【112】：自认为能够办到 所以自己做错了也不愿意承认是想把自己的失败敷衍过去 为此玩弄计策 玩文字游戏想要取得诺言图个安心 因为这样一来等到出错的时候就能推卸责任非常轻松啊.–大老师</strong></p><p><strong>【113】：如果失败也能称为是青春的象征的话，那么交友失败的人可谓是充满青春也不为过了吧。但是，他们却不会这么认为。 没有什么不可思议的。因为他们就是些利己主义的人。 那么，这应该算是欺瞒吧。谎言欺瞒秘密诈骗全都被如此差别对待。他们是邪恶。<br>总而言之，反过来说不讴歌青春的人才是真正的正义所在。我的结论就是–现充爆炸吧。–大老师</strong></p><h1 id="雪之下雪乃"><a href="#雪之下雪乃" class="headerlink" title="雪之下雪乃"></a><strong>雪之下雪乃</strong></h1><p><strong>【1】：只要亲密的人理解我就好了，别人怎么想我无所谓。–雪之下雪乃</strong></p><p><strong>【2】：最低限度都没有做到的人，没资格去羡慕有才能的人。 无法成功的人正是因为想不到成功的人花费了多少心血，才无法成功的啊。–雪之下雪乃</strong></p><p><strong>【3】：只是为了剷除敌人而努力，那努力并非能提升自我，所以不能解决问题。–雪之下雪乃</strong></p><p><strong>【4】：人无完人。弱小丑陋会因为妒忌立刻去排挤别人，令人惊异的是，越优秀的人却活得越艰辛呢。–雪之下雪乃</strong></p><p><strong>【5】：人只要有容身之处，就不必化作星星，迎来燃烧殆尽的悲惨结局。–雪之下雪乃</strong></p><p><strong>【6】：什么都创造不出来，什么都得不到，什么都给予不了，只不过是伪物。–雪之下雪乃</strong></p><p><strong>【7】：如果你只会吸气吐气的话，旁边的空调都比你有用多了。–雪之下雪乃</strong></p><p><strong>【8】：只有努力才能想出解决之道哦。–雪之下雪乃</strong></p><p><strong>【9】：我认为，要提高自我就应该挑战极限。–雪之下雪乃</strong></p><p><strong>【10】：本来，我们就搞不懂对方在想什么。因为即使互相认识，也不见得就一定能相互理解。–雪之下雪乃</strong></p><p><strong>【11】：什么都倾听和帮忙并不能解决问题。–雪之下雪乃</strong></p><p><strong>【12】：人会把太过痛苦的记忆封印起来呢。–雪之下雪乃</strong></p><p><strong>【13】：没有依靠的话，也就找不到自己的容身之处。只好四处躲藏，被水冲走，随波逐流，撞向无形的墙壁。–雪之下雪乃</strong></p><p><strong>【14】：我虽然会妄言和失言，但我绝不虚言。–雪之下雪乃</strong></p><p><strong>【15】：正因为察觉到自己劣于别人，才会有错觉被人看不起吧.–雪之下雪乃</strong></p><p><strong>【16】：用考试的分数和名次来衡量一个人的价值才是愚蠢的行为。 就算成绩再好，人品方面有缺陷的人也是有的。–雪之下雪乃</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何将Typora中的图片通过PicGo上传到Gitee上</title>
      <link href="/archives/f40e5a3f.html"/>
      <url>/archives/f40e5a3f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载注册"><a href="#1-下载注册" class="headerlink" title="1.下载注册"></a>1.下载注册</h2><ul><li><strong>下载Typora</strong></li><li><strong>下载PicGo</strong></li><li><strong>在Gitee上注册账户</strong></li></ul><h2 id="2-开始使用"><a href="#2-开始使用" class="headerlink" title="2.开始使用"></a>2.开始使用</h2><h3 id="2-1创建仓库"><a href="#2-1创建仓库" class="headerlink" title="2.1创建仓库"></a>2.1创建仓库</h3><p><strong>在Gitee上创建存放图片的仓库</strong></p><p>==<strong>注意：在创建仓库时必须选择开源且选择单分支，否作PicGo将无法上传图片到Gitee</strong>==</p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271747023.png" alt="image-20220302094305266"></p><h3 id="2-2配置PicGo"><a href="#2-2配置PicGo" class="headerlink" title="2.2配置PicGo"></a>2.2配置PicGo</h3><h4 id="2-2-1安装插件"><a href="#2-2-1安装插件" class="headerlink" title="2.2.1安装插件"></a>2.2.1安装插件</h4><p><strong>首先在PicGo的插件设置中搜索gitee，安装gitee-uploader</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271747039.png" alt="image-20220302094457544"></p><h4 id="2-2-2配置插件"><a href="#2-2-2配置插件" class="headerlink" title="2.2.2配置插件"></a>2.2.2配置插件</h4><p><strong>在<code>repo</code>处填写你的仓库位置，在<code>gitee</code>中仓库对应的网址为<code>gitee.com/仓库位置</code>,例如下图中方框部分即为仓库位置：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271747672.png" alt="image-20220302094823613"></p><p><strong>在<code>token</code>处填写你申请的个人令牌。</strong></p><h4 id="2-2-3申请Token"><a href="#2-2-3申请Token" class="headerlink" title="2.2.3申请Token"></a>2.2.3申请Token</h4><p><strong>在<code>gitee</code>中点击<code>头像</code>-&gt;<code>设置</code>在<code>安全设置</code>处<code>私人令牌</code>处申请<code>token</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271748630.png" alt="image-20220302095043136"></p><p><strong>填写完成单击<code>确定</code>并<code>设为默认图床</code>即可</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271748398.png" alt="image-20220302094848725"></p><h3 id="2-3配置Typora"><a href="#2-3配置Typora" class="headerlink" title="2.3配置Typora"></a>2.3配置Typora</h3><p><strong>在Typora软件中依次打开<code>文件</code>-&gt;<code>偏好设置</code>-&gt;<code>图像</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271748736.png" alt="image-20220302095304779"></p><p><strong>使用HEXO写博客的读者在开启了HEXO的资源文件夹时建议将Typora的图像设置中的<code>插入图片时</code>选项更改为<code>复制到指定路径</code>,并勾选<code>对本地位置上的图片应用上述规则</code>和<code>对网络位置的图片应用上述规则</code>以及<code>允许根据YAML设置自动上传图片</code>,在<code>上传服务设定</code>中选择<code>PicGo(app)</code>选项，<code>PicGo路径</code>选择<code>PicGo</code>的安装目录，可以通过验证图片上传选项来验证是否配置成功。配置成功之后在整篇文章写完之后可以在<code>Typora</code>中依次点击<code>格式</code>-&gt;<code>图像</code>-&gt;<code>上传所有本地图像</code>进行上传。</strong></p><p><strong>至此，所有的配置都完成了</strong></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> typora </tag>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蛮神歌</title>
      <link href="/archives/be483b3f.html"/>
      <url>/archives/be483b3f.html</url>
      
        <content type="html"><![CDATA[<h1 id="蛮神歌"><a href="#蛮神歌" class="headerlink" title="蛮神歌"></a>蛮神歌</h1><p><strong>我出生之初尚无为，<br>我出生之后蛮已衰!<br>天不仁兮降乱离，<br>地不仁兮使我乌山殇!<br>干戈起兮月碎纷非,<br>陌于南兮家路哀悲!<br>若天有眼兮何不见我永世沉沦黑？<br>若神有灵兮何事分我天南海北离？<br>我不负天兮天何让我不见夜之黑？<br>我不负神兮神何殛我血肉忆纷飞！<br>无日无夜兮思我乡土,<br>流离路芒兮难见苍天苦!<br>我思亲兮魂众何有,<br>魂思我兮阴死路心断愁!<br>真假难辨兮乌山在天荒!<br>生死天地兮我身何方!<br>泣血仰头兮何惜一命逆沧桑!<br>天无眼兮我踏天以目自封苍！<br>神无灵兮我誓言屠神立帝方！<br>气运加身兮我定去手刃帝天桑!<br>蛮魂归凝兮此生血染仙苍千万亡！<br>散尽此生歌蛮殇，<br>凭此意灭尽仙族又何妨！</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>将Hexo部署到Gitee上</title>
      <link href="/archives/c01f3c7.html"/>
      <url>/archives/c01f3c7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-注册码云"><a href="#1-注册码云" class="headerlink" title="1.注册码云"></a>1.注册码云</h2><h2 id="2-新建仓库"><a href="#2-新建仓库" class="headerlink" title="2.新建仓库"></a>2.新建仓库</h2><p><strong>填写相关信息。注意的是仓库名称一定要填写为你登录码云账户的那个用户名。其他的都不行。<br>重要的事说三遍：</strong></p><ul><li><strong>仓库名称一定要填写为你登录码云账户的那个用户名。</strong></li><li><strong>仓库名称一定要填写为你登录码云账户的那个用户名。</strong></li><li><strong>仓库名称一定要填写为你登录码云账户的那个用户名。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271745152.png" alt="image-20220303212257569"></p><p><img src="https://gitee.com/luo-cheng49/images/raw/master/202203032123729.png" alt="image-20220303212328666"></p><h2 id="3-添加公钥"><a href="#3-添加公钥" class="headerlink" title="3.添加公钥"></a>3.添加公钥</h2><p><strong>点击<code>管理</code>—&gt;<code>部署公钥管理</code>—&gt;<code>新增部署公钥</code>，添加公钥的内容也是之前部署到<a href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020">GitHub</a>上添加的公钥</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271745686.png" alt="image-20220303212437420"></p><p><img src="https://gitee.com/luo-cheng49/images/raw/master/202203032124474.png" alt="image-20220303212457421"></p><ul><li>公钥标题：自定义</li><li>公钥内容：可以使用之前连接GitHub的公钥，在本地的C:\Users\你的电脑账户名.ssh，我的为<code>C:\Users\LEGION\.ssh</code>，用文本编辑器打开<code>id_rsa.pub</code>，将里面的内容复制粘贴到此处即可。</li></ul><h2 id="4-部署到码云"><a href="#4-部署到码云" class="headerlink" title="4.部署到码云"></a>4.部署到码云</h2><p><strong>将项目地址复制粘贴到配置文件_config.yml上，如下图所示：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271746185.png" alt="image-20220303212641610"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271746216.png" alt="image-20220303212731066"></p><p><strong>在blog根目录点击Git Bash Here，执行代码：</strong><code>hexo clean &amp;&amp; g -d</code></p><p><strong>部署成功后，点击<code>服务</code>—&gt;<code>Gitee Pages</code>，进入下面的页面：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271746129.png" alt="image-20220303213041661"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271746460.png" alt="image-20220303213104230"></p><p><strong>启动之后就可以点击网址访问了。需要注意的是码云支持的自定义域名一年是99块。没钱，只能用分配的域名了。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271746665.png" alt="image-20220303213213913"></p><p><strong>这里再安装一个hexo的插件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save            # 安装git插件</span><br><span class="line">git config --global user.email *********@qq.com # 设置gitee邮箱（gitee的注册邮箱）</span><br><span class="line">git config --global user.name &#x27;****&#x27;            # 设置用户名（git的注册昵称）</span><br><span class="line">hexo deploy                                     # 上传到gitee</span><br><span class="line"># 在上传时，需要再次输入gitee的注册邮箱作为username，账户密码作为password</span><br></pre></td></tr></table></figure><p><strong>这样，博客就部署到Gitee上了</strong></p><h2 id="5-更新博客"><a href="#5-更新博客" class="headerlink" title="5.更新博客"></a>5.更新博客</h2><p><strong>每次修改了博客，不仅要在Git Bash Here里面上传，还需要在<code>Git Page</code>里面更新一下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271746864.png" alt="image-20220303224703032"></p><p><strong>解决hexo博客网页无法使用图片问题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save  # 安装hexo插件</span><br><span class="line"># 这里还要注意修改_config.yml中的一个点</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora书写方法</title>
      <link href="/archives/f918e375.html"/>
      <url>/archives/f918e375.html</url>
      
        <content type="html"><![CDATA[<p>==（1）标题==</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>==（2）字体==</p><p><strong>加粗</strong></p><p><em>斜体</em></p><p><em><strong>斜体加粗</strong></em></p><p><del>删除线</del></p><p>==高亮==</p><p>我是^上标^</p><p>我是<del>下标</del></p><p>==（3）列表==</p><ul><li><p>一二三四五</p><ul><li><p>上山打老虎</p><ul><li><p>老虎没打到</p><ul><li>打到小松鼠</li></ul></li></ul></li></ul></li></ul><ol><li><p>一二三四五</p></li><li><p>上山打老虎</p></li><li><p>老虎没打到</p></li><li><p>打到小松鼠</p></li></ol><p>==（4）表格==</p><table><thead><tr><th>Mon</th><th>TUE</th><th>WEN</th><th>THU</th><th>FRI</th></tr></thead><tbody><tr><td>上山</td><td>上山</td><td>上山</td><td>上山</td><td>上山</td></tr><tr><td>打老虎</td><td>打老虎</td><td>打老虎</td><td>打老虎</td><td>打老虎</td></tr></tbody></table><p>==（5）引用==</p><blockquote><p>一二三四五</p></blockquote><blockquote><blockquote><p>上山打老虎</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>老虎没打到</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><blockquote><p>打到小松鼠</p></blockquote></blockquote></blockquote></blockquote><p>==（6）分割线==</p><hr><p>==（7）代码==</p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271745593.png" alt="image-20220228210641593"></p><p><code>我是代码</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">我是代码框</span><br><span class="line"></span><br><span class="line"> 作者：你的乖女儿不乖 https://www.bilibili.com/read/cv6491991?spm_id_from=333.788.b_636f6d6d656e74.7 出处：bilibili</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js安装</title>
      <link href="/archives/b5446670.html"/>
      <url>/archives/b5446670.html</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h1><ol><li><p>node官网下载安装包<br><a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271744209.png" alt="image-20230126115430733"></p></li><li><p>直接进行下载安装</p></li><li><p>环境变量配置</p><ul><li>右键电脑，点击属性</li><li>点击高级系统设置</li><li>点击环境变量</li><li>点击系统变量的新建变量，创建变量名为NODE_PATH，值为node.js安装路径</li><li><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271744943.png" alt="image-20230126120015330"></li><li>点击系统变量中的path</li><li>新建%NODE_PATH%</li><li><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271744474.png" alt="image-20230126120203519" style="zoom:67%;" /></li></ul></li></ol><h3 id="注意：如果不配置环境变量，可能会导致使用在git中使用hexo命令出现如下错误"><a href="#注意：如果不配置环境变量，可能会导致使用在git中使用hexo命令出现如下错误" class="headerlink" title="注意：如果不配置环境变量，可能会导致使用在git中使用hexo命令出现如下错误"></a>注意：如果不配置环境变量，可能会导致使用在git中使用hexo命令出现如下错误</h3><h3 id="bash-hexo-command-not-found"><a href="#bash-hexo-command-not-found" class="headerlink" title="bash: hexo: command not found"></a>bash: hexo: command not found</h3><p>依次输入命令 <code>node -v</code> 和 <code>npm -v</code> 看看是否有相关版本信息</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271744116.png" alt="image-20230126120420419" style="zoom:67%;" /><p>出现了版本信息就证明 nodejs 和 npm 是没有问题的，那么就应该是环境变量的配置问题了</p><p>按照上述方法进行环境变量配置</p><p>环境变量添加好了之后重新打开 git 即可运行 hexo 命令，如果此时仍然无法执行 hexo 命令，那就只能拿出终极绝招了，运行命令 <code>npm install hexo-cli -g</code> 重新安装 hexo 即可！</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中web项目DefaultServlet标红怎么解决?</title>
      <link href="/archives/8a5f9afd.html"/>
      <url>/archives/8a5f9afd.html</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA中web项目Servlet标红怎么解决"><a href="#IDEA中web项目Servlet标红怎么解决" class="headerlink" title="IDEA中web项目Servlet标红怎么解决?"></a>IDEA中web项目Servlet标红怎么解决?</h1><h2 id="导入tomcat依赖"><a href="#导入tomcat依赖" class="headerlink" title="导入tomcat依赖"></a>导入tomcat依赖</h2><p><strong>直接将tomcat的jar包导入即可。如下图所示：</strong></p><ul><li><p><strong>选择Project Structure（快捷键Ctrl+Alt+Shift+S）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271744556.png" alt="image-20220322152416732"></p></li><li><p><strong>选中工程或对应的Module，选中Dependencies标签，点右上角小加号，选中第二项“Library”，添加依赖，选中Tomcat进行添加</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271744165.png" alt="image-20220322152514354"></p></li></ul><p><strong>大功告成！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA创建Java web项目</title>
      <link href="/archives/9f187caa.html"/>
      <url>/archives/9f187caa.html</url>
      
        <content type="html"><![CDATA[<h1 id="Intellij-IDEA2021-1创建Java-web项目"><a href="#Intellij-IDEA2021-1创建Java-web项目" class="headerlink" title="Intellij IDEA2021.1创建Java web项目"></a>Intellij IDEA2021.1创建Java web项目</h1><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271738321.png" alt="image-20220320215618426"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271738977.png" alt="image-20220320215733776"></p><p>==记住不要选择java Enterprise，否则创建的web工程会带有maven，就不是我们想要的javaweb项目了==</p><p><strong>点击next</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271738410.png" alt="image-20220320215816806"></p><p><strong>填写项目的名称以及位置，finish</strong></p><p><img src="https://gitee.com/luo-cheng49/images/raw/master/202203202159592.png" alt="image-20220320215903531"></p><p><strong>右键项目，选择add framework support</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739802.png" alt="image-20220320215948715"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739386.png" alt="image-20220320220011340"></p><p><strong>完成之后，项目结构变成了这样</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739121.png" alt="image-20220320220046480"></p><p><strong>接下来，我们在WEB-INF下创建classes,lib文件夹</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739578.png"></p><p><strong>编辑项目结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739644.png" alt="image-20220320220220408"></p><p><strong>将output path的路径改成classes文件夹的路径</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739633.png" alt="image-20220320220300538"></p><p><strong>接下来点击dependencies，选择加号，选择jars or directories</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739355.png" alt="image-20220320220337725"></p><p><strong>点击后，他会弹出一个文件选择框，这里选择lib文件所在位置，之后按照下面这张图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739436.png" alt="image-20220320220403078"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739966.png" alt="image-20220320220422935"></p><p><strong>完成以上这些，我们配置web容器（注意：这里是</strong>tomcat Server**,不是tomcatEE Server）**</p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739781.png" alt="image-20220320220508959"></p><p><strong>第一步配置tomcat所在路径，第二步配置jre/jdk,第三步填写web容器名字，这里可以写tomcat+版本号</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271739920.png" alt="image-20220320220541886"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271740083.png" alt="image-20220320220558589"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271740921.png" alt="image-20220320220617653"></p><p><strong>完成后，点击OK即可<br>最后点击右上角的绿色三角形启动容器</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271740138.png" alt="image-20220320220643510"></p><p><strong>大功告成！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271740059.png" alt="QQ图片20220320194759"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA右键新建new没有servlet选项</title>
      <link href="/archives/4ab8c20d.html"/>
      <url>/archives/4ab8c20d.html</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA右键新建new没有servlet选项"><a href="#IDEA右键新建new没有servlet选项" class="headerlink" title="IDEA右键新建new没有servlet选项"></a>IDEA右键新建new没有servlet选项</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271736754.png" alt="image-20220323110335588"></p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271736929.png" alt="image-20220323110424627"></p><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271736650.png" alt="image-20220323110456629"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA编写数据库对应的JavaBean对象</title>
      <link href="/archives/ffb33e90.html"/>
      <url>/archives/ffb33e90.html</url>
      
        <content type="html"><![CDATA[<h1 id="Intellij-IDEA编写数据库对应的JavaBean对象"><a href="#Intellij-IDEA编写数据库对应的JavaBean对象" class="headerlink" title="Intellij IDEA编写数据库对应的JavaBean对象"></a>Intellij IDEA编写数据库对应的JavaBean对象</h1><h3 id="新建一个Java文件"><a href="#新建一个Java文件" class="headerlink" title="新建一个Java文件"></a>新建一个Java文件</h3><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271734850.png" alt="image-20220322225755963"></p><h3 id="写我们需要的属性"><a href="#写我们需要的属性" class="headerlink" title="写我们需要的属性"></a>写我们需要的属性</h3><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271734538.png" alt="image-20220322225900496"></p><h3 id="生成set和get方法"><a href="#生成set和get方法" class="headerlink" title="生成set和get方法"></a>生成set和get方法</h3><p><strong>笔记本：Fn+Alt+F12</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271734794.png" alt="image-20220322230043374"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271734851.png" alt="image-20220322230126179"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271734255.png" alt="image-20220322230818867"></p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p><strong>笔记本：Fn+Alt+F12</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271735366.png" alt="image-20220322230522421"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271735180.png" alt="image-20220322230629398"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271735631.png" alt="image-20220322230802031"></p><h3 id="有参和无参构造"><a href="#有参和无参构造" class="headerlink" title="有参和无参构造"></a>有参和无参构造</h3><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271735562.png" alt="image-20220322230924490"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271735020.png" alt="image-20220322230943078"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271735308.png" alt="image-20220322231003199"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271735313.png" alt="image-20220322231034699"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271735326.png" alt="image-20220322231053597"></p><p><strong>大功告成！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> JavaBean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常见错误</title>
      <link href="/archives/9d3ff6cd.html"/>
      <url>/archives/9d3ff6cd.html</url>
      
        <content type="html"><![CDATA[<h2 id="hexo常见错误"><a href="#hexo常见错误" class="headerlink" title="hexo常见错误"></a>hexo常见错误</h2><ol><li><p>使用hexo s命令报错</p><p>ERROR {undefined<br>  err: YAMLException: end of the stream or a document separator is expected at line 6, column 1:</p><pre><code>  - 博客  ^</code></pre><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271733528.png" alt="image-20220301091033227"></p><p>解决方法：</p><p>新写的md文件不是由命令生成的，而是复制进去的，首部有语法错误，可以按照以下格式修改：</p></li></ol><hr><p>   title:    Hello World<br>   date:   2013/7/13 20:46:25<br>   你的内容</p><p><strong>==注意，冒号后面必须有空格==</strong></p><hr><p>   <img src="https://gitee.com/luo-cheng49/images/raw/master/image-20220301091239426.png" alt="image-20220301091239426"></p><p>   然后成功了</p><p>   <img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271734201.png" alt="image-20220301091305778"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git安装</title>
      <link href="/archives/703a2c62.html"/>
      <url>/archives/703a2c62.html</url>
      
        <content type="html"><![CDATA[<h1 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h1><p><strong>下载地址为 <a href="https://git-scm.com/">git-scm.com</a>或者<a href="http://gitforwindows.org/">gitforwindows.org</a></strong></p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271723306.png" alt="image-20230126113350908" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271723742.png" alt="image-20230126113418206" style="zoom:50%;" /><p>双击下载后的 <code>Git-2.39.1-64-bit.exe</code>，开始安装，这个界面主要展示了 GPL 第 2 版协议<a href="https://blog.csdn.net/mukes/article/details/115693833#fn1">1</a>的内容，点击 [next] 到第二步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271723479.png" alt="image-20230126113657765" style="zoom: 67%;" /><h4 id="选择安装目录"><a href="#选择安装目录" class="headerlink" title="选择安装目录"></a>选择安装目录</h4><p>可点击 “Browse…” 更换目录，也可直接在方框里面改，我一般直接将 “C” 改为 “F:Program Files”，这样就直接安装在 F 盘的ProGram Files里了。点击 [next] 到第三步。</p><h4 id="选择安装组件"><a href="#选择安装组件" class="headerlink" title="选择安装组件"></a>选择安装组件</h4><p>图中这些英文都比较简单，我已经把大概意思翻译出来了，大家根据自己的需要选择勾选。点击 [next] 到第四步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271723088.png" alt="image-20230126113839830" style="zoom:67%;" /><h4 id="选择开始菜单文件夹"><a href="#选择开始菜单文件夹" class="headerlink" title="选择开始菜单文件夹"></a>选择开始菜单文件夹</h4><p>方框内 Git 可改为其他名字，也可点击 “<code>Browse...</code>” 选择其他文件夹或者给”<code>Don&#39;t create a Start Menu folder</code>“ 打勾不要文件夹，点击 [next] 到第五步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724208.png" alt="image-20230126113927613" style="zoom:67%;" /><p>安装成功后在开始菜单里的图如下：</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724467.png" alt="image-20230126113950902" style="zoom:50%;" /><h4 id="选择-Git-默认编辑器"><a href="#选择-Git-默认编辑器" class="headerlink" title="选择 Git 默认编辑器"></a>选择 Git 默认编辑器</h4><p>Git 安装程序里面内置了 10 种编辑器供你挑选，比如 Atom、Notepad、Notepad++、Sublime Text、Visual Studio Code、Vim 等等，默认的是 Vim ，选择 Vim 后可以直接进行到下一步，但是 Vim 是纯命令行，操作有点难度，需要学习。如果选其他编辑器，则还需要去其官网安装后才能进行下一步。</p><p>下图为默认编辑器 Vim.<strong>我选择的Visual studio code</strong>可直接点击 [next] 到第六步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724991.png" alt="image-20230126114043376" style="zoom:67%;" /><h4 id="决定初始化新项目-仓库-的主干名字"><a href="#决定初始化新项目-仓库-的主干名字" class="headerlink" title="决定初始化新项目(仓库)的主干名字"></a>决定初始化新项目(仓库)的主干名字</h4><p>第一种是让 Git 自己选择，名字是 master ，但是未来也有可能会改为其他名字；第二种是我们自行决定，默认是 main，当然，你也可以改为其他的名字。一般默认第一种，点击 [next] 到第七步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724261.png" alt="image-20230126114212502" style="zoom: 67%;" /><h4 id="调整你的-path-环境变量"><a href="#调整你的-path-环境变量" class="headerlink" title="调整你的 path 环境变量"></a>调整你的 path 环境变量</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724837.png" alt="image-20230126114239230" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Use Git from Git Bash only </span><br><span class="line">This is the most cautious choice as your PATH will not be modified at all. You w only be able to use the Git command line tools from Git Bash.</span><br><span class="line">仅从 Git Bash 使用 Git</span><br><span class="line">这是最谨慎的选择，因为您的 PATH 根本不会被修改。您将只能使用 Git Bash 中的 Git 命令行工具。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Git from the command line and also from 3rd-party software</span><br><span class="line">(Recommended) This option adds only some minimal Git wrappers to your PATH to avoid cluttering your environment with optional Unix tools.</span><br><span class="line">You will be able to use Git from Git Bash, the Command Prompt and the Windov PowerShell as well as any third-party software looking for Git in PATH.</span><br><span class="line">从命令行以及第三方软件进行 Git</span><br><span class="line">（推荐）此选项仅将一些最小的 Git 包装器添加到PATH中，以避免使用可选的 Unix 工具使环境混乱。</span><br><span class="line">您将能够使用 Git Bash 中的 Git，命令提示符和 Windov PowerShell 以及在 PATH 中寻找 Git 的任何第三方软件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Use Git and optional Unix tools from the Command Prompt </span><br><span class="line">Both Git and the optional Unix tools will be added to your PATH.</span><br><span class="line">Warning: This will override Windows tools like &quot;find&quot;and &quot;sort&quot;. Only use this option if you understand the implications.</span><br><span class="line">使用命令提示符中的 Git 和可选的 Unix 工具</span><br><span class="line">Git 和可选的 Unix 工具都将添加到您的 PATH 中。</span><br><span class="line">警告：这将覆盖 Windows 工具，例如 &quot;find&quot; and &quot;sort&quot;. 仅在了解其含义后使用此选项。</span><br></pre></td></tr></table></figure><p>第一种是仅从 Git Bash 使用 Git。这个的意思就是你只能通过 Git 安装后的 Git Bash 来使用 Git ，其他的什么命令提示符啊等第三方软件都不行。</p><p>第二种是从命令行以及第三方软件进行 Git。这个就是在第一种基础上进行第三方支持，你将能够从 Git Bash，命令提示符(cmd) 和 Windows PowerShell 以及可以从 Windows 系统环境变量中寻找 Git 的任何第三方软件中使用 Git。<strong>推荐使用这个。</strong></p><p>第三种是从命令提示符使用 Git 和可选的 Unix 工具。选择这种将覆盖 Windows 工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。<strong>一句话，适合比较懂的人折腾。</strong></p><h4 id="选择-SSH-执行文件"><a href="#选择-SSH-执行文件" class="headerlink" title="选择 SSH 执行文件"></a>选择 SSH 执行文件</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724100.png" alt="image-20230126114345805" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Use bundled OpenSSH </span><br><span class="line">This uses ssh. exe that comes with Git.</span><br><span class="line">使用捆绑的 OpenSSH</span><br><span class="line">这使用的 ssh.exe 是 Git 自带的 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Use (Tortoise) Plink </span><br><span class="line">To use PuTTY, specify the path to an existing copy of (Tortoise) Plink.exe</span><br><span class="line">Set ssh. variant for Tortoise Plink </span><br><span class="line">使用 TortoisePlink (注，这是一个软件)</span><br><span class="line">要使用 PuTTY，请指定 TortoisePlink.exe 的现有副本的路径</span><br><span class="line">为 TortoisePlink 设置 ssh.variant</span><br><span class="line"></span><br><span class="line">Use external OpenSSH </span><br><span class="line">NEW! This uses an external ssh. exe. Git will not install its own OpenSSH</span><br><span class="line">(and related) binaries but use them as found on the PATH.</span><br><span class="line">使用外部 OpenSSH</span><br><span class="line">新！这使用外部 ssh.exe 文件。 </span><br><span class="line">Git 不会安装自己的 OpenSSH（和相关）二进制文件，而是使用在环境变量 PATH 中找到的它们。</span><br></pre></td></tr></table></figure><blockquote><p>注：这是一个新功能，我 2021-4-17 安装的 2.31.1 版本并没有这个选项，先按默认的来吧，先填个坑，有机会再补充</p></blockquote><h4 id="选择HTTPS后端传输"><a href="#选择HTTPS后端传输" class="headerlink" title="选择HTTPS后端传输"></a>选择HTTPS后端传输</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724380.png" alt="image-20230126114427521" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use the OpenSSL library </span><br><span class="line">Server certificates will be validated using the ca-bundle. crt file.</span><br><span class="line">使用 OpenSSL 库</span><br><span class="line">服务器证书将使用 ca-bundle.crt 文件进行验证。</span><br><span class="line"></span><br><span class="line">Use the native Windows Secure Channel library </span><br><span class="line">Server certificates will be validated using Windows Certificate Stores.</span><br><span class="line">This option also allows you to use your company&#x27;s internal Root CA certificates distributed e.g. via Active Directory Domain Services.</span><br><span class="line">使用本机 Windows 安全通道库</span><br><span class="line">服务器证书将使用 Windows 证书存储进行验证。</span><br><span class="line">此选项还允许您使用公司内部分发的内部根 CA 证书，例如通过 Active Directory 域服务。</span><br></pre></td></tr></table></figure><p>点击 [next] 到第十步。</p><h4 id="配置行尾符号转换"><a href="#配置行尾符号转换" class="headerlink" title="配置行尾符号转换"></a>配置行尾符号转换</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724681.png" alt="image-20230126114525711" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Checkout Windows-style, commit Unix-style line endings </span><br><span class="line">Git will convert LF to CRLF when checking out text files. </span><br><span class="line">When committing text files, CRLF will be converted to LF. For cross-platform projects, this is the recommended setting on Windows(&quot;core. autocrif&quot;is set to &quot;true&quot;).</span><br><span class="line">签出 Windows 样式，提交 Unix 样式的行结尾</span><br><span class="line">Git 签出文本文件时，会将 LF 转换为 CRLF。</span><br><span class="line">提交文本文件时，CRLF 将转换为 LF。</span><br><span class="line">对于跨平台项目，这是 Windows 上的建议设置（&quot;core.autocrif&quot; 设置为 &quot;true&quot;）。</span><br><span class="line"></span><br><span class="line">Checkout as-is, commit Unix-style line endings </span><br><span class="line">Git will not perform any conversion when checking out text files. </span><br><span class="line">When committing text files, CRLF will be converted to LF. For cross-platform projects, this is the recommended setting on Unix(&quot;core.autocrif&quot; is set to &quot;input&quot;).</span><br><span class="line">按原样签出，提交 Unix 样式的行结尾</span><br><span class="line">Git 在签出文本文件时不会执行任何转换。提交文本文件时，CRLF 将转换为 LF。</span><br><span class="line">对于跨平台项目，这是在 Unix 上的建议设置（&quot;core.autocrif&quot; 设置为 &quot;input&quot;）。</span><br><span class="line"></span><br><span class="line">Checkout as-is, commit as-is </span><br><span class="line">Git will not perform any conversions when checking out or committing text files. </span><br><span class="line">Choosing this option is not recommended for cross-platform projects(&quot;core. autocrif&quot;is set to &quot;false&quot;).</span><br><span class="line">按原样签出，按原样提交</span><br><span class="line">Git 在签出或提交文本文件时不会执行任何转换。</span><br><span class="line">不建议跨平台项目选择此选项（&quot;core.autocrif&quot; 设置为 &quot;false&quot;）。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这三种选择分别是：<br><code>签出 Windows 样式，提交 Unix 样式的行结尾。</code><br><code>按原样签出，提交Unix样式的行结尾。</code><br><code>按原样签出，按原样提交。</code></p><p>选择第一种即可。</p><p>点击 [next] 到第十一步。</p><h4 id="配置终端模拟器以与-Git-Bash-一起使用"><a href="#配置终端模拟器以与-Git-Bash-一起使用" class="headerlink" title="配置终端模拟器以与 Git Bash 一起使用"></a>配置终端模拟器以与 Git Bash 一起使用</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724001.png" alt="image-20230126114647586" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Use MinTTY(the default terminal of MSYS2) </span><br><span class="line">Git Bash will use MinTTY as terminal emulator, which sports a resizable window</span><br><span class="line">non-rectangular selections and a Unicode font.Windows console programs(such</span><br><span class="line">as interactive Python) must be launched via &#x27;winpty&#x27; to work in MinTTY.</span><br><span class="line">使用 MinTTY（MSYS2的默认终端）</span><br><span class="line">Git Bash 将使用 MinTTY 作为终端仿真器，该仿真器具有可调整大小的窗口非矩形选择和 Unicode 字体。</span><br><span class="line">Windows 控制台程序（例如交互式 Python）必须通过 &quot;winpty&quot; 启动才能在 MinTTY 中运行。</span><br><span class="line"></span><br><span class="line">Use Windows&#x27; default console </span><br><span class="line">window Git will use the default console window of Windows(&quot;cmd.exe&quot;), which works v</span><br><span class="line">with Win32 console programs such as interactive Python or node. js, but has a</span><br><span class="line">very limited default scroll-back,needs to be configured to use a Unicode font in </span><br><span class="line">order to display non-ASCII characters correctly, and prior to Windows 10 its </span><br><span class="line">window was not freely resizable and it only allowed rectangular text selections.&lt;br&gt;</span><br><span class="line">使用 Windows 的默认控制台窗口</span><br><span class="line">Git 将使用 Windows 的默认控制台窗口（&quot;cmd.exe&quot;），该窗口可与 Win32 控制台程序（例如交互式Python 或 </span><br><span class="line">node.js）一起使用，但默认回滚非常有限，需要将其配置为使用 Unicode 字体才能正确显示非 ASCII 字符，并且在 </span><br><span class="line">Windows 10 之前，其窗口不可随意调整大小，并且仅允许选择矩形文本。</span><br></pre></td></tr></table></figure><p>建议选择第一种，MinTTY 3功能比 cmd 多，cmd 只不过 比 MinTTY 更适合处理 Windows 的一些接口问题，这个对 Git 用处不大，除此之外 Windows 的默认控制台窗口（cmd）有很多劣势，比如 cmd 具有非常有限的默认历史记录回滚堆栈和糟糕的字体编码等等。<br>相比之下，MinTTY 具有可调整大小的窗口和其他有用的可配置选项，可以通过右键单击的工具栏来打开它们 git-bash 。点击 [next] 到第十二步。</p><h4 id="选择默认的-“git-pull”-行为"><a href="#选择默认的-“git-pull”-行为" class="headerlink" title="选择默认的 “git pull” 行为"></a>选择默认的 “git pull” 行为</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724878.png" alt="image-20230126114747255" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ODefault(fast-forward or merge)</span><br><span class="line">This is the standard behavior ofgit pull&quot;: fast-forward the current branch to </span><br><span class="line">the fetched branch when possible, otherwise create a merge commit.</span><br><span class="line">默认（快进或合并）</span><br><span class="line">这是 &quot;git pull&quot; 的标准行为：在可能的情况下将 当前分支 快进到 获取的分支，否则创建合并提交。</span><br><span class="line"></span><br><span class="line">ORebase Rebase the current branch onto the fetched branch. If there are no local </span><br><span class="line">commits to rebase, this is equivalent to a fast-forward.</span><br><span class="line">变基将当前分支变基到获取的分支上。如果没有本地提交要变基，则等同于快进。</span><br><span class="line"></span><br><span class="line">Oonly ever fast-forward </span><br><span class="line">Fast-forward to the fetched branch. Fail if that is not possible.</span><br><span class="line">只能快进快进到获取的分支。如果不可能，则失败。</span><br></pre></td></tr></table></figure><h4 id="选择一个凭证帮助程序"><a href="#选择一个凭证帮助程序" class="headerlink" title="选择一个凭证帮助程序"></a>选择一个凭证帮助程序</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724365.png" alt="image-20230126114822875" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Git Credential Manager </span><br><span class="line">Use the cross-platform Git Credential Manager.</span><br><span class="line">See more information about the future of Git Credential Manager here.</span><br><span class="line">Git 凭证管理</span><br><span class="line">使用跨平台的 Git  凭证管理。</span><br><span class="line">在此处查看有关 Git 凭证管理未来的更多信息。</span><br><span class="line"></span><br><span class="line">None </span><br><span class="line">Do not use a credential helper.</span><br><span class="line">不使用凭证助手。</span><br></pre></td></tr></table></figure><p>一共两个选项：<br><code>Git 凭证管理</code><br><code>不使用凭证助手</code></p><p>第一个选项是提供<code>登录凭证</code>帮助的，Git 有时需要用户的凭据才能执行操作；例如，可能需要输入<code>用户名</code>和<code>密码</code>才能通过 HTTP 访问远程存储库（GitHub，GItLab 等等）。</p><p>登录图如下(属于第一个选项的，老图了)</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271725325.png" alt="image-20230126114905274" style="zoom:67%;" /><p>点击 [next] 进到十四步。</p><h4 id="配置额外的选项"><a href="#配置额外的选项" class="headerlink" title="配置额外的选项"></a>配置额外的选项</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271725621.png" alt="image-20230126114940723" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Enable file system caching </span><br><span class="line">File system data will be read in bulk and cached in memory for certain operations(&quot;core.fscache&quot; is set to &quot;true&quot;). </span><br><span class="line">This provides a significant performance boost.</span><br><span class="line">启用文件系统缓存</span><br><span class="line">将批量读取文件系统数据并将其缓存在内存中以进行某些操作（&quot;core.fscache” 设置为 &quot;true&quot;）。</span><br><span class="line">这可以显着提高性能。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enable symbolic links </span><br><span class="line">Enable symbolic links(requires the SeCreateSymbolicLink permission).</span><br><span class="line">Please note that existing repositories are unaffected by this setting.</span><br><span class="line">启用符号链接</span><br><span class="line">启用符号链接（需要SeCreateSymbolicLink权限）。</span><br><span class="line">请注意，现有存储库不受此设置的影响。</span><br></pre></td></tr></table></figure><p>有两个选项：<br>启用文件系统缓存<br>启用符号链接</p><p>启用文件系统缓存就是将批量读取文件系统数据并将其缓存在内存中以进行某些操作，可以显著提升性能。这个选项默认开启。<br>启用符号链接 ，符号链接是一类特殊的文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用，类似于 Windows 的快捷方式，不完全等同 类Unix（如 Linux） 下的 符号链接。因为该功能的支持需要一些条件，所以默认不开启。</p><p>点击 [next] 到第十五步。</p><h4 id="配置实验性选项"><a href="#配置实验性选项" class="headerlink" title="配置实验性选项"></a>配置实验性选项</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271725024.png" alt="image-20230126115028548" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Enable experimental support for pseudo consoles.</span><br><span class="line">(NEW!) This allows running native console programs like Node or Python in a Git Bash window without using winpty, </span><br><span class="line">but it still has known bugs.</span><br><span class="line">启用对伪控制台的实验性支持。</span><br><span class="line">(新功能!) 这允许在不使用 winpty 的情况下在 Git Bash 窗口中运行诸如 Node 或 Python 之类的本机控制台程序，</span><br><span class="line">但是它仍然存在已知的 bug。</span><br><span class="line"></span><br><span class="line">Enable experimental built-in file system monitor</span><br><span class="line">(NEW!) Automatically run a built-in file system watcher, to speed up common operations such as &#x27; git status&#x27;, &#x27; git add&#x27;, &#x27; git commit&#x27;, etc in worktrees containing many files.</span><br><span class="line">启用实验性内置文件系统监视器</span><br><span class="line">（新！）自动运行内置文件系统监视器，以加快包含许多文件的工作树中的常见操作，例如 &#x27;git status&#x27;、&#x27;git add&#x27;、&#x27;git commit&#x27; 等.</span><br></pre></td></tr></table></figure><p>这是实验性功能，可能会有一些小错误之类的，建议不用开启。<br>点击 [install] 进行安装。</p><p>安装成功</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271725451.png" alt="image-20230126115102780" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipes的配置</title>
      <link href="/archives/dbbe0d0f.html"/>
      <url>/archives/dbbe0d0f.html</url>
      
        <content type="html"><![CDATA[<h2 id="Eclipes的首次配置"><a href="#Eclipes的首次配置" class="headerlink" title="Eclipes的首次配置"></a>Eclipes的首次配置</h2><ul><li><p><strong>在桌面创建一个workplace，将之后所有eclipse创建的java文件放到这个文件夹中</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057739.png" alt="image-20220303162058165"></p><p><strong>双击eclipse，出现上图，点击Browse，选中你刚刚创建的文件夹，不要勾选红框按钮，不勾选可以多次点击eclipse显示多个eclipse页面，点击Launch</strong></p></li><li><p><strong>进入welcome界面，叉掉welcome界面，开始正式设置eclipse</strong>                                                                                    </p><p> ==<strong>需要注意的是，这次配置只能适用于当前工作文件夹，如果选择其他文件夹，则会需要重新配置</strong>==</p></li><li><p><strong>1.</strong><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057587.png" alt="image-20220303163104018"></p></li><li><p><strong>2.在搜索框中搜索package，点击，会出现在下方，将其拖到左侧栏中</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057242.png" alt="image-20220303163221441"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271716774.png" alt="image-20220303163341113"></p><p><strong>再搜索nav，出现Navigator，点击，会自动出现在左侧栏中</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271716787.png" alt="image-20220303163434145"></p><p><strong>将左侧栏中的Project Explore叉掉</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057874.png" alt="image-20220303163551619"></p><p><strong>将右侧的outline拖到左侧栏中</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057784.png" alt="image-20220303163637828"></p><p><strong>搜索console控制台，点击</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057653.png" alt="image-20220303163719744"></p><p><strong>将下方的除了console之外的全部叉掉，也可以保留server</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057913.png" alt="image-20220303163819982"></p></li><li><p><strong>3.点击window-&gt;preferences</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057841.png" alt="image-20220303162800338"></p><p><strong>General-&gt;Workspace-&gt;选择UTF-8</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058949.png" alt="image-20220303164002133"></p><p><strong>General-&gt;Appearance-&gt;Colors and Fonts-&gt;Basic-&gt;Text font-&gt;Edit    来设置字体</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058881.png" alt="image-20220303164158422"></p><p><strong>window—&gt;perspective-&gt;Customize Perspective…</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058105.png" alt="image-20220303164427643"></p><p><strong>点击Menu Visibility，出现如下图所示</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058416.png" alt="image-20220303164611721"></p><p><strong>如下图所示，New里面十分混乱，所以需要我们自己对上图出现的New进行勾选</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058725.png" alt="image-20220303164753848"></p><p><strong>先将New清理掉</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058147.png" alt="image-20220303164950684"></p><p><strong>再勾选出我们需要的，比如   Java Project , Package , Class , Interface , Enum , Annotation ,                        JUnit Test Case , Folder ,   FileJSP File ,   Dynamic Web Project  ,   Servlet  ,  Filter  ,   Listener               Html File   ,   CSS File ,   XML File</strong></p></li><li><p><strong>4.最后，点击window-&gt;Perspective-&gt;Save Perspective As…，可以将我们刚刚设置好的配置保存下来，如果我们不小心将现有布局打乱，可以点击window-&gt;Perspective-&gt;Reset Perspective…重新还原成现有布局</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058299.png" alt="image-20220303165611717"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA整合码云(gitee)或GitHub代码托管平台将本地项目上传</title>
      <link href="/archives/703a2c62.html"/>
      <url>/archives/703a2c62.html</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA整合码云-gitee-代码托管平台将本地项目上传"><a href="#IDEA整合码云-gitee-代码托管平台将本地项目上传" class="headerlink" title="IDEA整合码云(gitee)代码托管平台将本地项目上传"></a>IDEA整合码云(gitee)代码托管平台将本地项目上传</h1><h2 id="1-上传"><a href="#1-上传" class="headerlink" title="1.上传"></a>1.上传</h2><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271737843.png" alt="image-20220323191736642"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271737318.png" alt="image-20220323191824018"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271737740.png" alt="image-20220323191856720"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271737476.png" alt="image-20220323192021692"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271737038.png" alt="image-20220323192030918"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271737756.png" alt="image-20220323192223151"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271737874.png" alt="image-20220323192244753"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271737142.png" alt="image-20220323192308105"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271737930.png" alt="image-20220323192331161"></p><p> <img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271738362.png" alt="image-20220323192357062"></p><h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2.下载"></a>2.下载</h2><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271738917.png" alt="image-20220323192511915"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271738127.png" alt="image-20220323192614284"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271738575.png" alt="image-20220323192654945"></p><p><strong>即可克隆到idea上</strong></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码上传 </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee代码克隆以及上传</title>
      <link href="/archives/4b45517f.html"/>
      <url>/archives/4b45517f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Gitee代码克隆以及上传"><a href="#Gitee代码克隆以及上传" class="headerlink" title="Gitee代码克隆以及上传"></a>Gitee代码克隆以及上传</h1><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h2><ul><li><p><strong>在桌面新建一个文件夹，右键Git Bash Here，配置git操作的用户名，邮箱</strong></p><p><code>git config --global user.name &quot;你的名字或者昵称&quot;</code></p><p><code>git config --global user.email &quot;你的邮箱&quot;</code></p></li><li><p><strong>配置ssh公钥</strong></p><p><strong>在Git Bash Here输入如下命令，生成SSH key</strong></p><p><code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code></p></li><li><p><strong>输入如下命令，复制刚才生成的SSH key</strong></p><p><code>cat ~/.ssh/id_rea.pub</code></p></li><li><p><strong>Gitee右上角个人设置-&gt;安全设置-&gt;SSH公钥-&gt;添加公钥，复制生成的public key，添加到当前账户中</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271711562.png" alt="image-20220302211648111"></p></li><li><p><strong>测试SSH key是否配置成功</strong></p><p><code>$ssh -T git@gitee.com</code></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271712336.png" alt="image-20220302211850823"></p><p><strong>配置成功</strong></p></li></ul><h2 id="2-上传代码到Gitee"><a href="#2-上传代码到Gitee" class="headerlink" title="2.上传代码到Gitee"></a>2.上传代码到Gitee</h2><p><strong>在代码文件夹点击右键Git Bash Here</strong><br>输入如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;my commit&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><strong>代码上传成功</strong></p><h2 id="3-克隆代码到本地"><a href="#3-克隆代码到本地" class="headerlink" title="3.克隆代码到本地"></a>3.克隆代码到本地</h2><p><strong>在Gitee所需要克隆的项目中找到克隆/下载，复制地址</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271712280.png" alt="image-20220302212552543"></p><p><strong>在桌面点击右键Git Bash Here,输入如下代码:</strong></p><p><code>git clone https://gitee.com/luo-cheng49/gitee-code-upload-and-download.git</code></p><p><strong>项目就克隆到桌面了</strong></p>]]></content>
      
      
      <categories>
          
          <category> gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> 代码上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse自动补全代码</title>
      <link href="/archives/95e15736.html"/>
      <url>/archives/95e15736.html</url>
      
        <content type="html"><![CDATA[<h1 id="Eclipse自动补全代码"><a href="#Eclipse自动补全代码" class="headerlink" title="Eclipse自动补全代码"></a>Eclipse自动补全代码</h1><h2 id="Java代码自动补全"><a href="#Java代码自动补全" class="headerlink" title="Java代码自动补全"></a>Java代码自动补全</h2><p><strong>依次点击Window –&gt; Perferences（选项设置） –&gt; Java –&gt; Editor（编辑） –&gt; Content Assist</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271710028.png" alt="image-20220328151930860"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271710339.png" alt="image-20220328152120439"></p><h2 id="HTML代码自动补全"><a href="#HTML代码自动补全" class="headerlink" title="HTML代码自动补全"></a>HTML代码自动补全</h2><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271710929.png" alt="image-20220328152311252"></p><h2 id="XML代码自动补全"><a href="#XML代码自动补全" class="headerlink" title="XML代码自动补全"></a>XML代码自动补全</h2><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271710660.png" alt="image-20220328152408218"></p>]]></content>
      
      
      <categories>
          
          <category> eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建（hexo篇）</title>
      <link href="/archives/78d13f96.html"/>
      <url>/archives/78d13f96.html</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客搭建（Hexo-Github）"><a href="#个人博客搭建（Hexo-Github）" class="headerlink" title="个人博客搭建（Hexo+Github）"></a>个人博客搭建（Hexo+Github）</h1><h3 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h3><ul><li><p><strong>git安装</strong></p></li><li><p><strong>node.js安装</strong></p></li></ul><h3 id="2、hexo安装"><a href="#2、hexo安装" class="headerlink" title="2、hexo安装"></a>2、hexo安装</h3><p>在桌面右键点击Git Bash Here</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><p>下载完成，输入hexo version</p><p>出现下图所示便代表下载成功</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742983.png" alt="image-20230126121520871" style="zoom:67%;" /><p>在桌面创建文件夹，用于设置博客，我取名叫MyBlog</p><p>在MyBlog文件夹中右键点击Git Bash Here</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化完毕</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742848.png" alt="image-20230126121829039" style="zoom:67%;" /><p>安装依赖，继续输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>可以开始使用博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="3、hexo配置"><a href="#3、hexo配置" class="headerlink" title="3、hexo配置"></a>3、hexo配置</h3><h4 id="1、在GitHub中创建仓库"><a href="#1、在GitHub中创建仓库" class="headerlink" title="1、在GitHub中创建仓库"></a>1、在GitHub中创建仓库</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742544.png" alt="image-20230126122242561" style="zoom:67%;" /><h4 id="2、在git中设置用户名密码"><a href="#2、在git中设置用户名密码" class="headerlink" title="2、在git中设置用户名密码"></a>2、在git中设置用户名密码</h4><p>在桌面右键Git Bash Here</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;luocheng49&quot;</span><br><span class="line">//这是github里你的名字</span><br><span class="line">git config --global user.email &quot;2855037844@qq.com&quot;</span><br><span class="line">//这是创建GitHub使用的邮箱</span><br></pre></td></tr></table></figure><h4 id="3、在visual-studio-code中打开MyBLog文件夹"><a href="#3、在visual-studio-code中打开MyBLog文件夹" class="headerlink" title="3、在visual studio code中打开MyBLog文件夹"></a>3、在visual studio code中打开MyBLog文件夹</h4><p>打开_config.yml</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742378.png" alt="image-20230126122731392" style="zoom: 50%;" /><p>修改参数</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742762.png" alt="image-20230126122811544" style="zoom:67%;" /><blockquote><p>repo: <a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a>:luocheng49/luocheng49.github.io.git</p><p>初次使用上面网址作为repo，会报错</p></blockquote><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742487.png" alt="image-20230126123058662" style="zoom:67%;" /><p>原因是没有设置ssh密钥</p><p>解决办法：</p><ol><li><p>删除.SSH文件下的known_hosts(.SSH在C:\Users\Windows用户名目录下)</p></li><li><p>生成ssh公钥认证所需的公钥和私钥文件</p><p>ssh-keygen -t rsa -C “你的名字/你的邮箱”</p><ul><li><p>然后会出现以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):</span><br><span class="line">/c/Users/Administrator/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y（输入y）</span><br><span class="line">Enter passphrase (empty for no passphrase):（回车）</span><br><span class="line"></span><br><span class="line">Enter same passphrase again:（回车）</span><br></pre></td></tr></table></figure><p>然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub，将里面的内容复制到下面这里</p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742249.png" alt="image-20230126123302674"></p><p>在Git中输入ssh -T <a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#109;">&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#109;</a>验证与github连接是否成功时</p><p>The authenticity of host ‘github.com (13.250.177.223)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)? yes（输入yes）<br>Warning: Permanently added ‘github.com,13.250.177.223’ (RSA) to the list of known hosts.</p><p>Hi XXX! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>最后再试着拉取一下项目，就成了。。</p></li><li><p>但也会出现这种情况</p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742032.png" alt="image-20230126123549265"></p><p>解决办法</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;2855037844@qq.com&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742244.png" alt="image-20230126123748997"></p><p>这样就成功了</p><p>然后再执行上面步骤</p></li></ul></li></ol><h4 id="4、设置主题"><a href="#4、设置主题" class="headerlink" title="4、设置主题"></a>4、设置主题</h4><p>在GitHub中搜索butterfly</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271742893.png" alt="image-20230126130100913" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271743586.png" alt="image-20230126130142335" style="zoom:80%;" /><p>在MyBlog文件夹中右键点击Git Bash Here</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p><strong>下载完成后，在MyBlog文件夹中的_config.yml中将theme主题修改为butterfly</strong></p><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>即可在localhost:4000中看到主题已经生成</p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271743608.png" alt="image-20230126130513043"></p><p>如果报错</p><p>extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</p><p>说明你沒有 pug 以及 stylus 的渲染器</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-deployer-git --save / yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure><p>再然后继续执行下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>即可成功</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Gitee搭建个人博客</title>
      <link href="/archives/8fe2b6a8.html"/>
      <url>/archives/8fe2b6a8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Gitee-搭建个人博客"><a href="#Hexo-Gitee-搭建个人博客" class="headerlink" title="Hexo + Gitee 搭建个人博客"></a>Hexo + Gitee 搭建个人博客</h1><h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h2><ul><li>安装Git</li><li>安装node.js</li><li>npm</li></ul><h3 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://nodejs.org/en/</span><br><span class="line">https://git-scm.com/</span><br></pre></td></tr></table></figure><h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><ul><li>node -v</li><li>npm -v</li></ul><h2 id="二-开始搭建"><a href="#二-开始搭建" class="headerlink" title="二.开始搭建"></a>二.开始搭建</h2><h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h3><p><strong>在桌面点击鼠标右键，有git bash here,点击</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271741379.png" alt="image-20220301093302576"></p><p>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo    #通过npm安装hexo</span><br><span class="line">#-g指定全局安装，可以使用hexo命令</span><br></pre></td></tr></table></figure><h3 id="2-初始化hexo"><a href="#2-初始化hexo" class="headerlink" title="2.初始化hexo"></a>2.初始化hexo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog   # 初始化创建，会再桌面创建blog文件夹</span><br><span class="line">cd blog              # 进入blog目录 </span><br><span class="line">npm install       # 进一步安装hexo所需文件</span><br></pre></td></tr></table></figure><p><strong>初始化后，文件夹目录如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271741259.png" alt="image-20220301093828945"></p><h3 id="3-启动hexo"><a href="#3-启动hexo" class="headerlink" title="3.启动hexo"></a>3.启动hexo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   # 清除所有记录 /hexo c</span><br><span class="line">hexo generate  # 生成静态网页 /hexo g</span><br><span class="line">hexo server    # 启动服务 /hexo s</span><br></pre></td></tr></table></figure><p><strong>显示如下图，则运行成功</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271741480.png" alt="image-20220301094113737"></p><p><strong>然后使用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a></strong></p><h2 id="三-将博客部署到Gitee上"><a href="#三-将博客部署到Gitee上" class="headerlink" title="三.将博客部署到Gitee上"></a>三.将博客部署到Gitee上</h2><h3 id="1-注册码云，创建仓库"><a href="#1-注册码云，创建仓库" class="headerlink" title="1.注册码云，创建仓库"></a>1.注册码云，创建仓库</h3><p><strong>我们需要在 gitee 创建自己的账户（</strong>如果没有<strong>），然后再创建一个自己仓库</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271741411.png" alt="image-20220301092836530"></p><h3 id="2-生成-添加SSH公钥"><a href="#2-生成-添加SSH公钥" class="headerlink" title="2. 生成/添加SSH公钥"></a>2. 生成/添加SSH公钥</h3><p><strong>配置ssh账户和邮箱</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email *********@qq.com # 设置邮箱</span><br><span class="line">git config --global user.name &#x27;****&#x27;   # 设置用户名</span><br></pre></td></tr></table></figure><p><strong>查看账户和邮箱</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name </span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><p><strong>本地生成ssh公钥</strong><br><strong>邮箱为刚配置好的邮箱</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@qq.com&quot;</span><br></pre></td></tr></table></figure><p><strong>按照提示完成三次回车，即可生成 ssh key</strong><br><strong>复制公钥去 Gitee 粘贴，添加</strong></p><ul><li>说明一下：<strong>GitHub、gitlab、码云</strong>三个平台可以使用一个公钥</li></ul><p><strong>测试是否连接成功</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><h3 id="3-配置连接Gitee"><a href="#3-配置连接Gitee" class="headerlink" title="3. 配置连接Gitee"></a>3. 配置连接Gitee</h3><p>进入我们先建的仓库，复制项目地址<br>到hexo的配置文件_config.yml，相应位置修改成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git                        # type为git</span><br><span class="line">  repo: git@gitee.com:XXXXXX/blog.git  # 仓库的 URL,只需要到blog的上一层，不是完整的URL</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>注意：冒号后面一定要有空格，否则不能正确识别。</strong></p><h3 id="4-部署博客"><a href="#4-部署博客" class="headerlink" title="4.部署博客"></a>4.部署博客</h3><p><strong>安装自动部署发布工具，不然部署会报错</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>创建一个博客文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一个博客&quot;</span><br><span class="line">hexo clean</span><br><span class="line">hexo g # 生成部署</span><br></pre></td></tr></table></figure><p><strong>如下图所示表示成功</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271741412.png" alt="image-20220301100039397"></p><p><strong>再使用hexo s 启动hexo查看</strong></p><h3 id="5-其他问题"><a href="#5-其他问题" class="headerlink" title="5.其他问题"></a>5.其他问题</h3><p><strong>如果手动写了一篇博客，想要部署到网页上，则需要在文件开头加上</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title:    Hello World</span><br><span class="line">date:   2013/7/13 20:46:25</span><br><span class="line">你的内容</span><br></pre></td></tr></table></figure><p><strong>==注意，冒号后面必须有空格==</strong></p><p><strong>否则会报错</strong></p><figure class="highlight plaintext"><figcaption><span>&#123;undefined</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err: YAMLException: end of the stream or a document separator is expected at line 6, column 1:</span><br></pre></td></tr></table></figure><p><strong>然后再将文件复制到blog/source/-posts下面</strong></p><p><strong>在该文件夹下点击鼠标右键Git Bash Here，输入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g   #将新的文件夹重新部署到hexo上</span><br><span class="line">hexo s   #启动hexo</span><br></pre></td></tr></table></figure><p><strong>这样博客就部署完成了</strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
