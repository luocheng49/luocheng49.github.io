<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gitee代码克隆以及上传</title>
      <link href="/archives/4b45517f.html"/>
      <url>/archives/4b45517f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h2><ul><li><p><strong>在桌面新建一个文件夹，右键Git Bash Here，配置git操作的用户名，邮箱</strong></p><p><code>git config --global user.name &quot;你的名字或者昵称&quot;</code></p><p><code>git config --global user.email &quot;你的邮箱&quot;</code></p></li><li><p><strong>配置ssh公钥</strong></p><p><strong>在Git Bash Here输入如下命令，生成SSH key</strong></p><p><code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code></p></li><li><p><strong>输入如下命令，复制刚才生成的SSH key</strong></p><p><code>cat ~/.ssh/id_rea.pub</code></p></li><li><p><strong>Gitee右上角个人设置-&gt;安全设置-&gt;SSH公钥-&gt;添加公钥，复制生成的public key，添加到当前账户中</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271711562.png" alt="image-20220302211648111"></p></li><li><p><strong>测试SSH key是否配置成功</strong></p><p><code>$ssh -T git@gitee.com</code></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271712336.png" alt="image-20220302211850823"></p><p><strong>配置成功</strong></p></li></ul><h2 id="2-上传代码到Gitee"><a href="#2-上传代码到Gitee" class="headerlink" title="2.上传代码到Gitee"></a>2.上传代码到Gitee</h2><p><strong>在代码文件夹点击右键Git Bash Here</strong><br>输入如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;my commit&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><strong>代码上传成功</strong></p><h2 id="3-克隆代码到本地"><a href="#3-克隆代码到本地" class="headerlink" title="3.克隆代码到本地"></a>3.克隆代码到本地</h2><p><strong>在Gitee所需要克隆的项目中找到克隆/下载，复制地址</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271712280.png" alt="image-20220302212552543"></p><p><strong>在桌面点击右键Git Bash Here,输入如下代码:</strong></p><p><code>git clone https://gitee.com/luo-cheng49/gitee-code-upload-and-download.git</code></p><p><strong>项目就克隆到桌面了</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>eclipse自动补全代码</title>
      <link href="/archives/95e15736.html"/>
      <url>/archives/95e15736.html</url>
      
        <content type="html"><![CDATA[<h1 id="Eclipse自动补全代码"><a href="#Eclipse自动补全代码" class="headerlink" title="Eclipse自动补全代码"></a>Eclipse自动补全代码</h1><h2 id="Java代码自动补全"><a href="#Java代码自动补全" class="headerlink" title="Java代码自动补全"></a>Java代码自动补全</h2><p><strong>依次点击Window –&gt; Perferences（选项设置） –&gt; Java –&gt; Editor（编辑） –&gt; Content Assist</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271710028.png" alt="image-20220328151930860"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271710339.png" alt="image-20220328152120439"></p><h2 id="HTML代码自动补全"><a href="#HTML代码自动补全" class="headerlink" title="HTML代码自动补全"></a>HTML代码自动补全</h2><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271710929.png" alt="image-20220328152311252"></p><h2 id="XML代码自动补全"><a href="#XML代码自动补全" class="headerlink" title="XML代码自动补全"></a>XML代码自动补全</h2><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271710660.png" alt="image-20220328152408218"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/archives/0.html"/>
      <url>/archives/0.html</url>
      
        <content type="html"><![CDATA[<p>title:  Gitee代码克隆以及上传<br>date:  ‘2023/1/27 17:23:25’<br>cover: </p><h1 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h1><p><strong>下载地址为 <a href="https://git-scm.com/">git-scm.com</a>或者<a href="http://gitforwindows.org/">gitforwindows.org</a></strong></p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271723306.png" alt="image-20230126113350908" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271723742.png" alt="image-20230126113418206" style="zoom:50%;" /><p>双击下载后的 <code>Git-2.39.1-64-bit.exe</code>，开始安装，这个界面主要展示了 GPL 第 2 版协议<a href="https://blog.csdn.net/mukes/article/details/115693833#fn1">1</a>的内容，点击 [next] 到第二步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271723479.png" alt="image-20230126113657765" style="zoom: 67%;" /><h4 id="选择安装目录"><a href="#选择安装目录" class="headerlink" title="选择安装目录"></a>选择安装目录</h4><p>可点击 “Browse…” 更换目录，也可直接在方框里面改，我一般直接将 “C” 改为 “F:Program Files”，这样就直接安装在 F 盘的ProGram Files里了。点击 [next] 到第三步。</p><h4 id="选择安装组件"><a href="#选择安装组件" class="headerlink" title="选择安装组件"></a>选择安装组件</h4><p>图中这些英文都比较简单，我已经把大概意思翻译出来了，大家根据自己的需要选择勾选。点击 [next] 到第四步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271723088.png" alt="image-20230126113839830" style="zoom:67%;" /><h4 id="选择开始菜单文件夹"><a href="#选择开始菜单文件夹" class="headerlink" title="选择开始菜单文件夹"></a>选择开始菜单文件夹</h4><p>方框内 Git 可改为其他名字，也可点击 “<code>Browse...</code>” 选择其他文件夹或者给”<code>Don&#39;t create a Start Menu folder</code>“ 打勾不要文件夹，点击 [next] 到第五步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724208.png" alt="image-20230126113927613" style="zoom:67%;" /><p>安装成功后在开始菜单里的图如下：</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724467.png" alt="image-20230126113950902" style="zoom:50%;" /><h4 id="选择-Git-默认编辑器"><a href="#选择-Git-默认编辑器" class="headerlink" title="选择 Git 默认编辑器"></a>选择 Git 默认编辑器</h4><p>Git 安装程序里面内置了 10 种编辑器供你挑选，比如 Atom、Notepad、Notepad++、Sublime Text、Visual Studio Code、Vim 等等，默认的是 Vim ，选择 Vim 后可以直接进行到下一步，但是 Vim 是纯命令行，操作有点难度，需要学习。如果选其他编辑器，则还需要去其官网安装后才能进行下一步。</p><p>下图为默认编辑器 Vim.<strong>我选择的Visual studio code</strong>可直接点击 [next] 到第六步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724991.png" alt="image-20230126114043376" style="zoom:67%;" /><h4 id="决定初始化新项目-仓库-的主干名字"><a href="#决定初始化新项目-仓库-的主干名字" class="headerlink" title="决定初始化新项目(仓库)的主干名字"></a>决定初始化新项目(仓库)的主干名字</h4><p>第一种是让 Git 自己选择，名字是 master ，但是未来也有可能会改为其他名字；第二种是我们自行决定，默认是 main，当然，你也可以改为其他的名字。一般默认第一种，点击 [next] 到第七步。</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724261.png" alt="image-20230126114212502" style="zoom: 67%;" /><h4 id="调整你的-path-环境变量"><a href="#调整你的-path-环境变量" class="headerlink" title="调整你的 path 环境变量"></a>调整你的 path 环境变量</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724837.png" alt="image-20230126114239230" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Use Git from Git Bash only </span><br><span class="line">This is the most cautious choice as your PATH will not be modified at all. You w only be able to use the Git command line tools from Git Bash.</span><br><span class="line">仅从 Git Bash 使用 Git</span><br><span class="line">这是最谨慎的选择，因为您的 PATH 根本不会被修改。您将只能使用 Git Bash 中的 Git 命令行工具。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Git from the command line and also from 3rd-party software</span><br><span class="line">(Recommended) This option adds only some minimal Git wrappers to your PATH to avoid cluttering your environment with optional Unix tools.</span><br><span class="line">You will be able to use Git from Git Bash, the Command Prompt and the Windov PowerShell as well as any third-party software looking for Git in PATH.</span><br><span class="line">从命令行以及第三方软件进行 Git</span><br><span class="line">（推荐）此选项仅将一些最小的 Git 包装器添加到PATH中，以避免使用可选的 Unix 工具使环境混乱。</span><br><span class="line">您将能够使用 Git Bash 中的 Git，命令提示符和 Windov PowerShell 以及在 PATH 中寻找 Git 的任何第三方软件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Use Git and optional Unix tools from the Command Prompt </span><br><span class="line">Both Git and the optional Unix tools will be added to your PATH.</span><br><span class="line">Warning: This will override Windows tools like &quot;find&quot;and &quot;sort&quot;. Only use this option if you understand the implications.</span><br><span class="line">使用命令提示符中的 Git 和可选的 Unix 工具</span><br><span class="line">Git 和可选的 Unix 工具都将添加到您的 PATH 中。</span><br><span class="line">警告：这将覆盖 Windows 工具，例如 &quot;find&quot; and &quot;sort&quot;. 仅在了解其含义后使用此选项。</span><br></pre></td></tr></table></figure><p>第一种是仅从 Git Bash 使用 Git。这个的意思就是你只能通过 Git 安装后的 Git Bash 来使用 Git ，其他的什么命令提示符啊等第三方软件都不行。</p><p>第二种是从命令行以及第三方软件进行 Git。这个就是在第一种基础上进行第三方支持，你将能够从 Git Bash，命令提示符(cmd) 和 Windows PowerShell 以及可以从 Windows 系统环境变量中寻找 Git 的任何第三方软件中使用 Git。<strong>推荐使用这个。</strong></p><p>第三种是从命令提示符使用 Git 和可选的 Unix 工具。选择这种将覆盖 Windows 工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。<strong>一句话，适合比较懂的人折腾。</strong></p><h4 id="选择-SSH-执行文件"><a href="#选择-SSH-执行文件" class="headerlink" title="选择 SSH 执行文件"></a>选择 SSH 执行文件</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724100.png" alt="image-20230126114345805" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Use bundled OpenSSH </span><br><span class="line">This uses ssh. exe that comes with Git.</span><br><span class="line">使用捆绑的 OpenSSH</span><br><span class="line">这使用的 ssh.exe 是 Git 自带的 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Use (Tortoise) Plink </span><br><span class="line">To use PuTTY, specify the path to an existing copy of (Tortoise) Plink.exe</span><br><span class="line">Set ssh. variant for Tortoise Plink </span><br><span class="line">使用 TortoisePlink (注，这是一个软件)</span><br><span class="line">要使用 PuTTY，请指定 TortoisePlink.exe 的现有副本的路径</span><br><span class="line">为 TortoisePlink 设置 ssh.variant</span><br><span class="line"></span><br><span class="line">Use external OpenSSH </span><br><span class="line">NEW! This uses an external ssh. exe. Git will not install its own OpenSSH</span><br><span class="line">(and related) binaries but use them as found on the PATH.</span><br><span class="line">使用外部 OpenSSH</span><br><span class="line">新！这使用外部 ssh.exe 文件。 </span><br><span class="line">Git 不会安装自己的 OpenSSH（和相关）二进制文件，而是使用在环境变量 PATH 中找到的它们。</span><br></pre></td></tr></table></figure><blockquote><p>注：这是一个新功能，我 2021-4-17 安装的 2.31.1 版本并没有这个选项，先按默认的来吧，先填个坑，有机会再补充</p></blockquote><h4 id="选择HTTPS后端传输"><a href="#选择HTTPS后端传输" class="headerlink" title="选择HTTPS后端传输"></a>选择HTTPS后端传输</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724380.png" alt="image-20230126114427521" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use the OpenSSL library </span><br><span class="line">Server certificates will be validated using the ca-bundle. crt file.</span><br><span class="line">使用 OpenSSL 库</span><br><span class="line">服务器证书将使用 ca-bundle.crt 文件进行验证。</span><br><span class="line"></span><br><span class="line">Use the native Windows Secure Channel library </span><br><span class="line">Server certificates will be validated using Windows Certificate Stores.</span><br><span class="line">This option also allows you to use your company&#x27;s internal Root CA certificates distributed e.g. via Active Directory Domain Services.</span><br><span class="line">使用本机 Windows 安全通道库</span><br><span class="line">服务器证书将使用 Windows 证书存储进行验证。</span><br><span class="line">此选项还允许您使用公司内部分发的内部根 CA 证书，例如通过 Active Directory 域服务。</span><br></pre></td></tr></table></figure><p>点击 [next] 到第十步。</p><h4 id="配置行尾符号转换"><a href="#配置行尾符号转换" class="headerlink" title="配置行尾符号转换"></a>配置行尾符号转换</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724681.png" alt="image-20230126114525711" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Checkout Windows-style, commit Unix-style line endings </span><br><span class="line">Git will convert LF to CRLF when checking out text files. </span><br><span class="line">When committing text files, CRLF will be converted to LF. For cross-platform projects, this is the recommended setting on Windows(&quot;core. autocrif&quot;is set to &quot;true&quot;).</span><br><span class="line">签出 Windows 样式，提交 Unix 样式的行结尾</span><br><span class="line">Git 签出文本文件时，会将 LF 转换为 CRLF。</span><br><span class="line">提交文本文件时，CRLF 将转换为 LF。</span><br><span class="line">对于跨平台项目，这是 Windows 上的建议设置（&quot;core.autocrif&quot; 设置为 &quot;true&quot;）。</span><br><span class="line"></span><br><span class="line">Checkout as-is, commit Unix-style line endings </span><br><span class="line">Git will not perform any conversion when checking out text files. </span><br><span class="line">When committing text files, CRLF will be converted to LF. For cross-platform projects, this is the recommended setting on Unix(&quot;core.autocrif&quot; is set to &quot;input&quot;).</span><br><span class="line">按原样签出，提交 Unix 样式的行结尾</span><br><span class="line">Git 在签出文本文件时不会执行任何转换。提交文本文件时，CRLF 将转换为 LF。</span><br><span class="line">对于跨平台项目，这是在 Unix 上的建议设置（&quot;core.autocrif&quot; 设置为 &quot;input&quot;）。</span><br><span class="line"></span><br><span class="line">Checkout as-is, commit as-is </span><br><span class="line">Git will not perform any conversions when checking out or committing text files. </span><br><span class="line">Choosing this option is not recommended for cross-platform projects(&quot;core. autocrif&quot;is set to &quot;false&quot;).</span><br><span class="line">按原样签出，按原样提交</span><br><span class="line">Git 在签出或提交文本文件时不会执行任何转换。</span><br><span class="line">不建议跨平台项目选择此选项（&quot;core.autocrif&quot; 设置为 &quot;false&quot;）。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这三种选择分别是：<br><code>签出 Windows 样式，提交 Unix 样式的行结尾。</code><br><code>按原样签出，提交Unix样式的行结尾。</code><br><code>按原样签出，按原样提交。</code></p><p>选择第一种即可。</p><p>点击 [next] 到第十一步。</p><h4 id="配置终端模拟器以与-Git-Bash-一起使用"><a href="#配置终端模拟器以与-Git-Bash-一起使用" class="headerlink" title="配置终端模拟器以与 Git Bash 一起使用"></a>配置终端模拟器以与 Git Bash 一起使用</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724001.png" alt="image-20230126114647586" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Use MinTTY(the default terminal of MSYS2) </span><br><span class="line">Git Bash will use MinTTY as terminal emulator, which sports a resizable window</span><br><span class="line">non-rectangular selections and a Unicode font.Windows console programs(such</span><br><span class="line">as interactive Python) must be launched via &#x27;winpty&#x27; to work in MinTTY.</span><br><span class="line">使用 MinTTY（MSYS2的默认终端）</span><br><span class="line">Git Bash 将使用 MinTTY 作为终端仿真器，该仿真器具有可调整大小的窗口非矩形选择和 Unicode 字体。</span><br><span class="line">Windows 控制台程序（例如交互式 Python）必须通过 &quot;winpty&quot; 启动才能在 MinTTY 中运行。</span><br><span class="line"></span><br><span class="line">Use Windows&#x27; default console </span><br><span class="line">window Git will use the default console window of Windows(&quot;cmd.exe&quot;), which works v</span><br><span class="line">with Win32 console programs such as interactive Python or node. js, but has a</span><br><span class="line">very limited default scroll-back,needs to be configured to use a Unicode font in </span><br><span class="line">order to display non-ASCII characters correctly, and prior to Windows 10 its </span><br><span class="line">window was not freely resizable and it only allowed rectangular text selections.&lt;br&gt;</span><br><span class="line">使用 Windows 的默认控制台窗口</span><br><span class="line">Git 将使用 Windows 的默认控制台窗口（&quot;cmd.exe&quot;），该窗口可与 Win32 控制台程序（例如交互式Python 或 </span><br><span class="line">node.js）一起使用，但默认回滚非常有限，需要将其配置为使用 Unicode 字体才能正确显示非 ASCII 字符，并且在 </span><br><span class="line">Windows 10 之前，其窗口不可随意调整大小，并且仅允许选择矩形文本。</span><br></pre></td></tr></table></figure><p>建议选择第一种，MinTTY 3功能比 cmd 多，cmd 只不过 比 MinTTY 更适合处理 Windows 的一些接口问题，这个对 Git 用处不大，除此之外 Windows 的默认控制台窗口（cmd）有很多劣势，比如 cmd 具有非常有限的默认历史记录回滚堆栈和糟糕的字体编码等等。<br>相比之下，MinTTY 具有可调整大小的窗口和其他有用的可配置选项，可以通过右键单击的工具栏来打开它们 git-bash 。点击 [next] 到第十二步。</p><h4 id="选择默认的-“git-pull”-行为"><a href="#选择默认的-“git-pull”-行为" class="headerlink" title="选择默认的 “git pull” 行为"></a>选择默认的 “git pull” 行为</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724878.png" alt="image-20230126114747255" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ODefault(fast-forward or merge)</span><br><span class="line">This is the standard behavior ofgit pull&quot;: fast-forward the current branch to </span><br><span class="line">the fetched branch when possible, otherwise create a merge commit.</span><br><span class="line">默认（快进或合并）</span><br><span class="line">这是 &quot;git pull&quot; 的标准行为：在可能的情况下将 当前分支 快进到 获取的分支，否则创建合并提交。</span><br><span class="line"></span><br><span class="line">ORebase Rebase the current branch onto the fetched branch. If there are no local </span><br><span class="line">commits to rebase, this is equivalent to a fast-forward.</span><br><span class="line">变基将当前分支变基到获取的分支上。如果没有本地提交要变基，则等同于快进。</span><br><span class="line"></span><br><span class="line">Oonly ever fast-forward </span><br><span class="line">Fast-forward to the fetched branch. Fail if that is not possible.</span><br><span class="line">只能快进快进到获取的分支。如果不可能，则失败。</span><br></pre></td></tr></table></figure><h4 id="选择一个凭证帮助程序"><a href="#选择一个凭证帮助程序" class="headerlink" title="选择一个凭证帮助程序"></a>选择一个凭证帮助程序</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271724365.png" alt="image-20230126114822875" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Git Credential Manager </span><br><span class="line">Use the cross-platform Git Credential Manager.</span><br><span class="line">See more information about the future of Git Credential Manager here.</span><br><span class="line">Git 凭证管理</span><br><span class="line">使用跨平台的 Git  凭证管理。</span><br><span class="line">在此处查看有关 Git 凭证管理未来的更多信息。</span><br><span class="line"></span><br><span class="line">None </span><br><span class="line">Do not use a credential helper.</span><br><span class="line">不使用凭证助手。</span><br></pre></td></tr></table></figure><p>一共两个选项：<br><code>Git 凭证管理</code><br><code>不使用凭证助手</code></p><p>第一个选项是提供<code>登录凭证</code>帮助的，Git 有时需要用户的凭据才能执行操作；例如，可能需要输入<code>用户名</code>和<code>密码</code>才能通过 HTTP 访问远程存储库（GitHub，GItLab 等等）。</p><p>登录图如下(属于第一个选项的，老图了)</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271725325.png" alt="image-20230126114905274" style="zoom:67%;" /><p>点击 [next] 进到十四步。</p><h4 id="配置额外的选项"><a href="#配置额外的选项" class="headerlink" title="配置额外的选项"></a>配置额外的选项</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271725621.png" alt="image-20230126114940723" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Enable file system caching </span><br><span class="line">File system data will be read in bulk and cached in memory for certain operations(&quot;core.fscache&quot; is set to &quot;true&quot;). </span><br><span class="line">This provides a significant performance boost.</span><br><span class="line">启用文件系统缓存</span><br><span class="line">将批量读取文件系统数据并将其缓存在内存中以进行某些操作（&quot;core.fscache” 设置为 &quot;true&quot;）。</span><br><span class="line">这可以显着提高性能。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Enable symbolic links </span><br><span class="line">Enable symbolic links(requires the SeCreateSymbolicLink permission).</span><br><span class="line">Please note that existing repositories are unaffected by this setting.</span><br><span class="line">启用符号链接</span><br><span class="line">启用符号链接（需要SeCreateSymbolicLink权限）。</span><br><span class="line">请注意，现有存储库不受此设置的影响。</span><br></pre></td></tr></table></figure><p>有两个选项：<br>启用文件系统缓存<br>启用符号链接</p><p>启用文件系统缓存就是将批量读取文件系统数据并将其缓存在内存中以进行某些操作，可以显著提升性能。这个选项默认开启。<br>启用符号链接 ，符号链接是一类特殊的文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用，类似于 Windows 的快捷方式，不完全等同 类Unix（如 Linux） 下的 符号链接。因为该功能的支持需要一些条件，所以默认不开启。</p><p>点击 [next] 到第十五步。</p><h4 id="配置实验性选项"><a href="#配置实验性选项" class="headerlink" title="配置实验性选项"></a>配置实验性选项</h4><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271725024.png" alt="image-20230126115028548" style="zoom:67%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Enable experimental support for pseudo consoles.</span><br><span class="line">(NEW!) This allows running native console programs like Node or Python in a Git Bash window without using winpty, </span><br><span class="line">but it still has known bugs.</span><br><span class="line">启用对伪控制台的实验性支持。</span><br><span class="line">(新功能!) 这允许在不使用 winpty 的情况下在 Git Bash 窗口中运行诸如 Node 或 Python 之类的本机控制台程序，</span><br><span class="line">但是它仍然存在已知的 bug。</span><br><span class="line"></span><br><span class="line">Enable experimental built-in file system monitor</span><br><span class="line">(NEW!) Automatically run a built-in file system watcher, to speed up common operations such as &#x27; git status&#x27;, &#x27; git add&#x27;, &#x27; git commit&#x27;, etc in worktrees containing many files.</span><br><span class="line">启用实验性内置文件系统监视器</span><br><span class="line">（新！）自动运行内置文件系统监视器，以加快包含许多文件的工作树中的常见操作，例如 &#x27;git status&#x27;、&#x27;git add&#x27;、&#x27;git commit&#x27; 等.</span><br></pre></td></tr></table></figure><p>这是实验性功能，可能会有一些小错误之类的，建议不用开启。<br>点击 [install] 进行安装。</p><p>安装成功</p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271725451.png" alt="image-20230126115102780" style="zoom:67%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipes的配置</title>
      <link href="/archives/dbbe0d0f.html"/>
      <url>/archives/dbbe0d0f.html</url>
      
        <content type="html"><![CDATA[<h2 id="Eclipes的首次配置"><a href="#Eclipes的首次配置" class="headerlink" title="Eclipes的首次配置"></a>Eclipes的首次配置</h2><ul><li><p><strong>在桌面创建一个workplace，将之后所有eclipse创建的java文件放到这个文件夹中</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057739.png" alt="image-20220303162058165"></p><p><strong>双击eclipse，出现上图，点击Browse，选中你刚刚创建的文件夹，不要勾选红框按钮，不勾选可以多次点击eclipse显示多个eclipse页面，点击Launch</strong></p></li><li><p><strong>进入welcome界面，叉掉welcome界面，开始正式设置eclipse</strong>                                                                                     ==<strong>需要注意的是，这次配置只能适用于当前工作文件夹，如果选择其他文件夹，则会需要重新配置</strong>==</p></li><li><p><strong>1.</strong><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057587.png" alt="image-20220303163104018"></p></li><li><p><strong>2.在搜索框中搜索package，点击，会出现在下方，将其拖到左侧栏中</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057242.png" alt="image-20220303163221441"></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271716774.png" alt="image-20220303163341113"></p><p><strong>再搜索nav，出现Navigator，点击，会自动出现在左侧栏中</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271716787.png" alt="image-20220303163434145"></p><p><strong>将左侧栏中的Project Explore叉掉</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057874.png" alt="image-20220303163551619"></p><p><strong>将右侧的outline拖到左侧栏中</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057784.png" alt="image-20220303163637828"></p><p><strong>搜索console控制台，点击</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057653.png" alt="image-20220303163719744"></p><p><strong>将下方的除了console之外的全部叉掉，也可以保留server</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057913.png" alt="image-20220303163819982"></p></li><li><p><strong>3.点击window-&gt;preferences</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271057841.png" alt="image-20220303162800338"></p><p><strong>General-&gt;Workspace-&gt;选择UTF-8</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058949.png" alt="image-20220303164002133"></p><p><strong>General-&gt;Appearance-&gt;Colors and Fonts-&gt;Basic-&gt;Text font-&gt;Edit    来设置字体</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058881.png" alt="image-20220303164158422"></p><p><strong>window—&gt;perspective-&gt;Customize Perspective…</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058105.png" alt="image-20220303164427643"></p><p><strong>点击Menu Visibility，出现如下图所示</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058416.png" alt="image-20220303164611721"></p><p><strong>如下图所示，New里面十分混乱，所以需要我们自己对上图出现的New进行勾选</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058725.png" alt="image-20220303164753848"></p><p><strong>先将New清理掉</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058147.png" alt="image-20220303164950684"></p><p><strong>再勾选出我们需要的，比如   Java Project , Package , Class , Interface , Enum , Annotation ,                        JUnit Test Case , Folder ,   FileJSP File ,   Dynamic Web Project  ,   Servlet  ,  Filter  ,   Listener               Html File   ,   CSS File ,   XML File</strong></p></li><li><p><strong>4.最后，点击window-&gt;Perspective-&gt;Save Perspective As…，可以将我们刚刚设置好的配置保存下来，如果我们不小心将现有布局打乱，可以点击window-&gt;Perspective-&gt;Reset Perspective…重新还原成现有布局</strong></p><p><img src="https://cdn.jsdelivr.net/gh/luocheng49/MyBlogImage/img/202301271058299.png" alt="image-20220303165611717"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
